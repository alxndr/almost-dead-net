{"version":3,"sources":["webpack://almost-dead-net/./node_modules/ramda/es/internal/_Set.js","webpack://almost-dead-net/./node_modules/ramda/es/uniqBy.js","webpack://almost-dead-net/./src/pages/song.js"],"names":["hasOrAdd","item","shouldAdd","set","prevSize","type","Infinity","_items","_nativeSet","size","add","has","bIdx","_includes","push","Object","prototype","toString","call","_Set","this","Set","fn","list","appliedItem","result","idx","length","SET_MAPPING","set1","set2","set3","encore1","encore2","Song","pageContext","song","shows","sets","songs","songPerformances","teases","songId","id","performancesData","filter","propEq","performancesSorted","map","performanceData","performanceIdStr","setData","find","setlist","split","includes","console","warn","showData","show","whichSet","entries","col_name","variation","data","sort","perfA","perfB","dateA","Date","date","dateB","uniqShows","uniqBy","perf","performances","key","to","performancesComponent","teasesData","teasesComponent","teaseData","performance_id","within","className","title","description","author","authorInfo","suite"],"mappings":"sMAsCA,SAASA,EAASC,EAAMC,EAAWC,GACjC,IACIC,EADAC,SAAcJ,EAGlB,OAAQI,GACN,IAAK,SACL,IAAK,SAEH,OAAa,IAATJ,GAAc,EAAIA,IAAUK,MAC1BH,EAAII,OAAO,QAGTL,IACFC,EAAII,OAAO,OAAQ,IAGd,GAKY,OAAnBJ,EAAIK,WACFN,GACFE,EAAWD,EAAIK,WAAWC,KAE1BN,EAAIK,WAAWE,IAAIT,GAETE,EAAIK,WAAWC,OACNL,GAEZD,EAAIK,WAAWG,IAAIV,GAGtBI,KAAQF,EAAII,OAOPN,KAAQE,EAAII,OAAOF,KAGxBH,IACFC,EAAII,OAAOF,GAAMJ,IAAQ,IAGpB,IAbHC,IACFC,EAAII,OAAOF,GAAQ,GACnBF,EAAII,OAAOF,GAAMJ,IAAQ,IAGpB,GAYb,IAAK,UAGH,GAAII,KAAQF,EAAII,OAAQ,CACtB,IAAIK,EAAOX,EAAO,EAAI,EAEtB,QAAIE,EAAII,OAAOF,GAAMO,KAGfV,IACFC,EAAII,OAAOF,GAAMO,IAAQ,IAGpB,GAOT,OAJIV,IACFC,EAAII,OAAOF,GAAQJ,EAAO,EAAC,GAAO,GAAQ,EAAC,GAAM,KAG5C,EAGX,IAAK,WAEH,OAAuB,OAAnBE,EAAIK,WACFN,GACFE,EAAWD,EAAIK,WAAWC,KAE1BN,EAAIK,WAAWE,IAAIT,GAETE,EAAIK,WAAWC,OACNL,GAEZD,EAAIK,WAAWG,IAAIV,GAGtBI,KAAQF,EAAII,UAQb,EAAAM,EAAA,GAAUZ,EAAME,EAAII,OAAOF,MAC1BH,GACFC,EAAII,OAAOF,GAAMS,KAAKb,IAGjB,IAZHC,IACFC,EAAII,OAAOF,GAAQ,CAACJ,KAGf,GAcb,IAAK,YACH,QAAIE,EAAII,OAAOF,KAGTH,IACFC,EAAII,OAAOF,IAAQ,IAGd,GAGX,IAAK,SACH,GAAa,OAATJ,EACF,QAAKE,EAAII,OAAa,OAChBL,IACFC,EAAII,OAAa,MAAI,IAGhB,GAQb,QAKE,OAFAF,EAAOU,OAAOC,UAAUC,SAASC,KAAKjB,MAExBE,EAAII,UASb,EAAAM,EAAA,GAAUZ,EAAME,EAAII,OAAOF,MAC1BH,GACFC,EAAII,OAAOF,GAAMS,KAAKb,IAGjB,IAbHC,IACFC,EAAII,OAAOF,GAAQ,CAACJ,KAGf,IAiBf,MApMwB,WACtB,SAASkB,IAEPC,KAAKZ,WAA4B,mBAARa,IAAqB,IAAIA,IAAQ,KAC1DD,KAAKb,OAAS,GA6BhB,OAtBAY,EAAKH,UAAUN,IAAM,SAAUT,GAC7B,OAAQD,EAASC,GAAM,EAAMmB,OAO/BD,EAAKH,UAAUL,IAAM,SAAUV,GAC7B,OAAOD,EAASC,GAAM,EAAOmB,OAaxBD,EAjCe,GCuCxB,GApB0B,E,QAAA,IAAQ,SAAgBG,EAAIC,GAMpD,IALA,IAGIC,EAAavB,EAHbE,EAAM,IAAI,EACVsB,EAAS,GACTC,EAAM,EAGHA,EAAMH,EAAKI,QAEhBH,EAAcF,EADdrB,EAAOsB,EAAKG,IAGRvB,EAAIO,IAAIc,IACVC,EAAOX,KAAKb,GAGdyB,GAAO,EAGT,OAAOD,K,iDCjBT,IAAMG,EAAc,CAClBC,KAAM,QACNC,KAAM,QACNC,KAAM,QACNC,QAAS,SACTC,QAAS,iBAGI,SAASC,EAAT,GAAoF,IAAD,IAApEC,YAAcC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,iBAAkBC,EAAU,EAAVA,OACtF,KAAML,GAAQG,GAASC,GAAoBH,GAASI,GAAUH,GAC5D,OAAO,uCAET,IAAKF,EACH,OAAO,yDAMT,IAAMM,EAASN,EAAKO,GACdC,GAAmBC,QAAOC,OAAO,UAAWJ,GAAzBG,CAAkCL,GAsBrDO,EAAqBH,EACxBI,KAtBoB,SAAAC,GACrB,IAAMC,EAAmBD,EAAgBN,GAAG1B,WACtCkC,GAAUC,QAAK,SAACjD,GACpB,OAAOA,EAAIkD,SAAWlD,EAAIkD,QAAQpC,WAAWqC,MAAM,KAAKC,SAASL,KADnDE,CAEbd,GACH,IAAKa,IAAYA,EAAQR,GAEvB,OADAa,QAAQC,KAAR,qBAAmC,CAACrB,OAAMa,qBACnC,EAET,IAAMS,GAAWN,QAAK,SAACO,GAAD,MAAU,CAACA,EAAK9B,KAAM8B,EAAK7B,KAAM6B,EAAK5B,KAAM4B,EAAK3B,QAAS2B,EAAK1B,SAASsB,SAASJ,EAAQR,MAA9FS,CAAmGf,GACpH,IAAKqB,IAAaA,EAASf,GAEzB,OADAa,QAAQC,KAAR,sBAAoC,CAACrB,OAAMa,kBAAiBE,aACrD,EAET,IAAMS,EAAW7C,OAAO8C,QAAQjC,GAAawB,MAAK,gBAAEU,EAAF,iBAA+BJ,EAASI,KAAcX,EAAQR,MAAI,GAC9GoB,IAAYd,EAAgBc,WAAhB,IACVd,EAAgBc,UADN,IAGlB,MAAO,CAACd,kBAAiBS,WAAUK,YAAWH,eAK7Cf,QAAO,SAACmB,GAAD,OAAUA,GAAQA,EAAKN,YAC9BO,MAAK,SAACC,EAAOC,GACZ,IAAMC,EAAQ,IAAIC,KAAKH,EAAMR,SAASY,KAAKhB,MAAM,MAC3CiB,EAAQ,IAAIF,KAAKF,EAAMT,SAASY,KAAKhB,MAAM,MACjD,OAAIc,EAAQG,GACF,EAENH,EAAQG,EACH,EAEF,KAELC,EAAYC,GAAO,SAACC,GAAD,OAAUA,EAAKhB,SAASf,KAAII,GAC/C4B,EAAe5B,EAClBC,KAAI,YAAuD,IAArDC,EAAoD,EAApDA,gBAAiBS,EAAmC,EAAnCA,SAAUK,EAAyB,EAAzBA,UAAWH,EAAc,EAAdA,SAC3C,OAAO,sBAAIgB,IAAK3B,EAAgBN,IAC9B,gBAAC,KAAD,CAAMkC,GAAE,SAAWnB,EAASf,IACzBe,EAASY,KADZ,IACmBP,EADnB,OACkCH,OAIlCkB,EAAwBlC,EAAiBjB,OAAS,GACnD,gCACD,0CAAqB6C,EAAU7C,OAA/B,SAAkE,IAArB6C,EAAU7C,OAAe,GAAK,MAC3E,0BACGgD,IAKDI,GAAalC,QAAOC,OAAO,UAAWJ,GAAzBG,CAAkCJ,GAC/CuC,EAAkBD,EAAWpD,OAAS,GACxC,gCACA,oCACA,0BACGoD,EAAW/B,KAAI,SAAAiC,GACd,IAAMhC,GAAkBG,QAAKN,OAAO,KAAMmC,EAAUC,gBAA5B9B,CAA6CZ,GAC/DW,GAAUC,QAAK,SAACjD,GAAD,OAASA,EAAIkD,QAAQpC,WAAWqC,MAAM,KAAKC,SAASN,EAAgBN,GAAG1B,cAA5EmC,CAAyFd,GACnGoB,GAAWN,QAAK,SAACO,GAAD,MAAU,CAACA,EAAK9B,KAAM8B,EAAK7B,KAAM6B,EAAK5B,KAAM4B,EAAK3B,QAAS2B,EAAK1B,SAASsB,SAASJ,EAAQR,MAA9FS,CAAmGf,GACpH,OAAO,sBAAIuC,IAAKK,EAAUtC,IAAnB,UACE,gBAAC,KAAD,CAAMkC,GAAE,SAAWnB,EAASf,IAAOsC,EAAUE,OAA7C,MAAwDzB,EAASY,YAOlF,OAAO,gBAAC,IAAD,CAAQc,UAAU,YACvB,gBAAC,IAAD,CACEC,MAAK,IAAMjD,EAAKiD,MAAX,yBACLC,YAAW,qCAAuClD,EAAKiD,MAA5C,kCAEb,sBAAID,UAAU,kBAAkBhD,EAAKiD,OACrC,uBAAKD,UAAU,kBA7GnB,SAAoBG,GAClB,YADiC,IAAfA,MAAS,MACnBA,GACN,KAAK,KACL,IAAK,GACH,OAAO,EACT,IAAK,cACH,OAAO,0CACT,QACE,OAAO,+BAAOA,IAsGbC,CAAWpD,EAAKmD,QAChBnD,EAAKqD,OAAS,wCAAgBrD,EAAKqD,MAArB,WAEjB,uBAAKL,UAAU,0BAA0BN,GACzC,uBAAKM,UAAU,oBAAoBJ","file":"component---src-pages-song-js-972a6d8b8f9828b7307f.js","sourcesContent":["import _includes from \"./_includes.js\";\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  } // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n\n\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n\n          return false;\n        }\n      } // these types can all utilise the native Set\n\n\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        }\n\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    /* falls through */\n\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n\n        return false;\n      } // scan through all previously applied items\n\n\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n\n        return false;\n      }\n\n      return true;\n  }\n} // A simple Set type that honours R.equals semantics\n\n\nexport default _Set;","import _Set from \"./internal/_Set.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\n\nvar uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default uniqBy;","import React from 'react'\nimport {Link} from 'gatsby'\nimport {filter, find, propEq, uniqBy} from 'ramda'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './song.css'\n\nfunction authorInfo(author = null) {\n  switch (author) {\n    case null:\n    case '':\n      return false\n    case 'traditional':\n      return <p>(traditional)</p>\n    default:\n      return <p>by {author}</p>\n  }\n}\n\nconst SET_MAPPING = { // 'show table column name' to 'human readable set name'\n  set1: 'set 1',\n  set2: 'set 2',\n  set3: 'set 3',\n  encore1: 'encore',\n  encore2: 'double encore',\n}\n\nexport default function Song({pageContext: {song, shows, sets, songs, songPerformances, teases}}) {\n  if (!(song && songs && songPerformances && shows && teases && sets)) {\n    return <p>Loading...</p>\n  }\n  if (!song) {\n    return <p>Uh oh, no song data found...</p>\n  }\n  //const songNameSlug = song.title.toLowerCase().replace(/[\"'()]+/g, '').replace(/[^a-z0-9]+/g, '-')\n  //if (!params.name || params.name !== songNameSlug) {\n  //  return <Redirect to={`/song/${song.id}/${songNameSlug}`} />\n  //}\n  const songId = song.id\n  const performancesData = filter(propEq('song_id', songId))(songPerformances)\n  const attachMoreData = performanceData => {\n    const performanceIdStr = performanceData.id.toString()\n    const setData = find((set) => {\n      return set.setlist && set.setlist.toString().split(':').includes(performanceIdStr)\n    })(sets)\n    if (!setData || !setData.id) {\n      console.warn(`missing setData...`, {song, performanceData})\n      return false\n    }\n    const showData = find((show) => [show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(shows)\n    if (!showData || !showData.id) {\n      console.warn(`missing showData...`, {song, performanceData, setData})\n      return false\n    }\n    const whichSet = Object.entries(SET_MAPPING).find(([col_name, readable_name]) => showData[col_name] === setData.id)[1]\n    const variation = performanceData.variation\n      ? `(${performanceData.variation})`\n      : false\n    return {performanceData, showData, variation, whichSet}\n  }\n\n  const performancesSorted = performancesData\n    .map(attachMoreData)\n    .filter((data) => data && data.showData)\n    .sort((perfA, perfB) => {\n      const dateA = new Date(perfA.showData.date.split('/'))\n      const dateB = new Date(perfB.showData.date.split('/'))\n      if (dateA > dateB) {\n        return -1\n      }\n      if (dateA < dateB) {\n        return 1\n      }\n      return 0\n    })\n  const uniqShows = uniqBy((perf) => perf.showData.id, performancesSorted)\n  const performances = performancesSorted\n    .map(({performanceData, showData, variation, whichSet}) => {\n      return <li key={performanceData.id}>\n        <Link to={`/show/${showData.id}`}>\n          {showData.date} {variation} in {whichSet}\n        </Link>\n      </li>\n    })\n  const performancesComponent = performancesData.length > 0\n    ?  <>\n      <h2>Performed at {`${uniqShows.length} Show${uniqShows.length === 1 ? '' : 's'}`}</h2>\n      <ul>\n        {performances}\n      </ul>\n    </>\n    : false\n\n  const teasesData = filter(propEq('song_id', songId))(teases)\n  const teasesComponent = teasesData.length > 0\n    ? <>\n      <h2>Teases</h2>\n      <ul>\n        {teasesData.map(teaseData => {\n          const performanceData = find(propEq('id', teaseData.performance_id))(songPerformances)\n          const setData = find((set) => set.setlist.toString().split(':').includes(performanceData.id.toString()))(sets)\n          const showData = find((show) => [show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(shows)\n          return <li key={teaseData.id}>\n            within <Link to={`/show/${showData.id}`}>{teaseData.within} — {showData.date}</Link>\n          </li>\n        })}\n      </ul>\n    </>\n    : false\n\n  return <Layout className=\"songpage\">\n    <SEO\n      title={`\"${song.title}\" performances by JRAD`}\n      description={`List of performances of the song \"${song.title}\" by Joe Russo's Almost Dead`}\n    />\n    <h1 className=\"songpage__name\">{song.title}</h1>\n    <div className=\"songpage__info\">\n      {authorInfo(song.author)}\n      {song.suite && <p>Part of the {song.suite} suite</p>}\n    </div>\n    <div className=\"songpage__performances\">{performancesComponent}</div>\n    <div className=\"songpage__teases\">{teasesComponent}</div>\n  </Layout>\n}\n"],"sourceRoot":""}