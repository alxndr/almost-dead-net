{"version":3,"sources":["webpack://almost-dead-net/./node_modules/classnames/index.js","webpack://almost-dead-net/./src/components/link-with-previous-url.js","webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/templates/song.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","children","state","rest","Location","location","previousUrl","href","pluralize","number","word","SET_MAPPING","soundcheck","set1","set2","set3","encore1","encore2","SortableTable","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","id","isSorted","isSortedDesc","render","row","getRowProps","cells","cell","original","fullData","showData","classNameTd","classnames","blank","value","getCellProps","url","prior","song_id","after","to","endsWith","renderCell","Song","song","songsCsv","allSegues","allSeguesCsv","nodes","allSets","allSetsCsv","allShows","allShowsCsv","allSongPerformances","allSongperformancesCsv","teases","allTeasesCsv","onlyThisSongsPerformanceIds","performances","split","Error","onlyThisSongsPerformancesData","filter","songPerformance","includes","performanceData","performanceIdStr","setData","find","set","setlist","show","setIdsInts","String","perfPositionInSet","indexOf","perfPriorId","songPerf","segue","propEq","type","song_name","whichSet","entries","col_name","variation","date","title","performancesData","useMemo","performancesColumns","accessor","Header","sortType","a","b","Date","values","getTime","disableSortBy","description","author","authorInfo","suite","Boolean","teaseData","performance_id","highlight","within"],"mappings":"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","file":"component---src-templates-song-js-5f42f104b61722075e85.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from 'react'\nimport {Location} from '@reach/router'\nimport {Link} from 'gatsby'\n\nconst LinkWithPrevUrl = ({children, state, ...rest}) => (\n  <Location>\n    {({location}) =>\n      <Link {...rest} state={{previousUrl: location.href, ...state}}>\n        {children}\n      </Link>\n    }\n  </Location>\n)\n\nexport default LinkWithPrevUrl\n","/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useMemo} from 'react'\nimport {useSortBy, useTable} from 'react-table'\nimport {graphql} from 'gatsby'\nimport {find, propEq} from 'ramda'\nimport classnames from 'classnames'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Link from '../components/link-with-previous-url'\n\nimport './song.css'\n\nfunction authorInfo(author = null) {\n  switch (author) {\n    case null:\n    case '':\n      return false\n    case 'traditional':\n      return <p>(traditional)</p>\n    default:\n      return <p>by {author}</p>\n  }\n}\n\nconst SET_MAPPING = { // 'show table column name' to 'human readable set name'\n  soundcheck: 'soundcheck',\n  set1: 'set 1',\n  set2: 'set 2',\n  set3: 'set 3',\n  encore1: 'encore',\n  encore2: 'double encore',\n}\n\nexport const query = graphql`\n  query SongTemplate($songId: String!) {\n    songsCsv(id: {eq: $songId}) {\n      id\n      author\n      suite\n      title\n      performances\n    }\n    allSeguesCsv { nodes {\n      id\n      from_perf_id\n      to_perf_id\n      type\n    }}\n    allSetsCsv { nodes {\n      id\n      setlist\n    } }\n    allShowsCsv { nodes {\n      id\n      date\n      encore1\n      encore2\n      set1\n      set2\n      set3\n      soundcheck\n    } }\n    allSongperformancesCsv { nodes {\n      id\n      song_id\n      song_name\n    } }\n    allTeasesCsv(filter: {song_id: {eq: $songId}}) { nodes {\n      id\n      performance_id\n      within\n    } }\n  }\n`\n\nfunction renderCell({column, render, row}, previousUrl='') {\n  let url;\n  if (column.id === 'show')\n    url = `/show/${row.original.fullData.showData.id}`\n  else if (column.id === 'prior' && row.original.fullData.prior.song_id)\n    url = `/song/${row.original.fullData.prior.song_id}`\n  else if (column.id ===  'after' && row.original.fullData.after.song_id)\n    url = `/song/${row.original.fullData.after.song_id}`\n  if (url)\n    return <Link to={url} className={previousUrl.endsWith(url) ? 'highlight' : ''}>{render('Cell')}</Link>\n  return render('Cell')\n}\n\nfunction SortableTable({columns, data, previousUrl=''}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({columns, data}, useSortBy)\n  return <table {...getTableProps()} className=\"sortable\">\n    <thead>\n      {headerGroups.map(headerGroup =>\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column =>\n            <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                className={`sortable__cell-${column.id} ${column.isSorted ? column.isSortedDesc ? 'sorted-desc' : 'sorted-asc' : ''}`}>\n              {column.render('Header')}\n            </th>\n          )}\n        </tr>\n      )}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row) // no return value; mutates `row`?\n        return <tr {...row.getRowProps()}>\n          {row.cells.map(cell => {\n            const url = `/show/${cell.row.original.fullData.showData.id}`\n            const classNameTd = classnames({\n              blank: cell.value === '[opener]' || cell.value === '[closer]',\n              [`sortable__cell-${cell.column.id}`]: true,\n            })\n            return <td {...cell.getCellProps()} className={classNameTd}>{renderCell(cell, previousUrl)}</td>\n          })}\n        </tr>\n      })}\n    </tbody>\n  </table>\n}\n\nexport default function Song({data: {\n  songsCsv: song,\n  allSeguesCsv: {nodes: allSegues},\n  allSetsCsv: {nodes: allSets},\n  allShowsCsv: {nodes: allShows},\n  allSongperformancesCsv: {nodes: allSongPerformances},\n  allTeasesCsv: {nodes: teases},\n}, location}) {\n  if (!song) {\n    return <p>Uh oh, no song data found...</p>\n  }\n  const onlyThisSongsPerformanceIds = song.performances.split(':')\n  if (!allSongPerformances.length) {\n    throw new Error('No data for allSongPerformances')\n  }\n  if (!allShows.length) {\n    throw new Error('No data for allShows')\n  }\n  if (!allSets.length) {\n    throw new Error('No data for allSets')\n  }\n  if (!allSegues.length) {\n    throw new Error('No data for allSegues')\n  }\n  const onlyThisSongsPerformancesData = allSongPerformances\n    .filter((songPerformance) => onlyThisSongsPerformanceIds.includes(songPerformance.id))\n    .map((performanceData) => {\n      const performanceIdStr = performanceData.id.toString()\n      const setData = find((set) =>\n        set.setlist && set.setlist.toString().split(':').includes(performanceIdStr)\n      )(allSets)\n      if (!setData)\n        throw new Error('No setData', {song, performanceData, allSets})\n      const showData = find((show) => [\n        show.soundcheck,\n        show.set1,\n        show.set2,\n        show.set3,\n        show.encore1,\n        show.encore2\n      ].includes(setData.id))(allShows)\n      if (!showData) {\n        throw new Error('No showData', {song, performanceData, setData, allShows})\n      }\n      const setIdsInts = String(setData.setlist).split(':')\n      const perfPositionInSet = setIdsInts.indexOf(performanceIdStr)\n      let prior;\n      if (perfPositionInSet > 0) {\n        const perfPriorId = setIdsInts[perfPositionInSet - 1]\n        prior = allSongPerformances.find(songPerf => songPerf.id === perfPriorId) // TODO refactor to use an object lookup\n        prior.segue = find(propEq('to_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else prior = {song_name: '[opener]'}\n      let after;\n      if (perfPositionInSet < setIdsInts.length - 1) {\n        after = allSongPerformances.find(songPerf => songPerf.id === setIdsInts[perfPositionInSet + 1])\n        after.segue = find(propEq('from_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else after = {song_name: '[closer]'}\n      const whichSet = Object.entries(SET_MAPPING)\n        .find(([col_name, readable_name]) => showData[col_name] === setData.id)[1]\n      const variation = performanceData.variation\n        ? `(${performanceData.variation})`\n        : false\n      return {\n        show: showData.date,\n        prior: prior?.song_name,\n        'segue_prior': prior?.segue,\n        title: song.title,\n        'segue_after': after?.segue,\n        after: after?.song_name,\n        whichSet,\n        fullData: {performanceData, showData, variation, whichSet, prior, after}\n      }\n    })\n  // global.console.log({onlyThisSongsPerformancesData })\n\n  const performancesData = useMemo(() => onlyThisSongsPerformancesData, [])\n  const performancesColumns = useMemo(\n    () => [\n      {accessor: 'show', Header: 'show', sortType: (a,b) => new Date(a.values.show).getTime() - new Date(b.values.show).getTime()}, // TODO memoize this fn\n      {accessor: 'prior', Header: 'prior song'}, // TODO Filter out the/a\n      {accessor: 'segue_prior', Header: '>'},\n      {accessor: 'title', disableSortBy: true},\n      {accessor: 'segue_after', Header: '>'},\n      {accessor: 'after', Header: 'following song'}, // TODO Filter out the/a\n      {accessor: 'whichSet', Header: 'where', sortType: (a,b) => {\n        if (a.values.whichSet === 'soundcheck')\n          return -1;\n        if (b.values.whichSet === 'soundcheck')\n          return 1;\n        if (a.values.whichSet === 'set 1')\n          return -1;\n        if (b.values.whichSet === 'set 1')\n          return 1;\n        if (a.values.whichSet === 'set 2')\n          return -1;\n        if (b.values.whichSet === 'set 2')\n          return 1;\n        if (a.values.whichSet === 'set 3')\n          return -1;\n        if (b.values.whichSet === 'set 3')\n          return 1;\n        if (a.values.whichSet === 'encore')\n          return -1;\n        if (b.values.whichSet === 'encore')\n          return 1;\n        if (a.values.whichSet === 'double encore')\n          return -1;\n        if (b.values.whichSet === 'double encore')\n          return 1;\n      }},\n    ],\n    []\n  )\n\n  return <Layout className=\"songpage\">\n    <SEO\n      title={`\"${song.title}\" performed or teased by JRAD`}\n      description={`List of each time Joe Russo's Almost Dead has performed or teased the song \"${song.title}\" ${song.author && song.author !== 'traditional' ? `by ${song.author}` : ''}`}\n    />\n\n    <h1 className=\"songpage__name\">{song.title}</h1>\n    <div className=\"songpage__info\">\n      {authorInfo(song.author)}\n      {song.suite && <p>Part of the {song.suite} suite</p>}\n    </div>\n\n    {Boolean(performancesData.length) && // TODO verify that this count is accurate if a song is played twice in one show...\n      <div className=\"songpage__performances\">\n        <h2>Performed at {pluralize(performancesData.length, 'Show')}</h2>\n        <SortableTable data={performancesData} columns={performancesColumns} previousUrl={location?.state?.previousUrl} />\n      </div>\n    }\n\n    {Boolean(teases.length) &&\n      <div className=\"songpage__teases\">\n        <h2>Teases</h2>\n        <ul>\n          {teases.map(teaseData => {\n            const performanceData = find(propEq('id', teaseData.performance_id))(allSongPerformances)\n            if (!(performanceData?.id)) {\n              return false\n            }\n            const setData = find((set) => set.setlist.toString().split(':').includes(performanceData.id.toString()))(allSets)\n            const showData = find((show) => [show.soundcheck, show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(allShows)\n            const url = `/show/${showData.id}`\n            return <li key={teaseData.id} className={classnames({highlight: location?.state?.previousUrl?.endsWith(url)})}>\n              <Link to={url}>{showData.date} within {teaseData.within} {performanceData.variation && `(${performanceData.variation})`}</Link>\n            </li>\n          })}\n        </ul>\n      </div>\n    }\n  </Layout>\n}\n"],"sourceRoot":""}