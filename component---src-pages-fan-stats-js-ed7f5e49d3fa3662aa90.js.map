{"version":3,"sources":["webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/pages/fan-stats.js"],"names":["pluralize","number","word","numericalSort","a","b","UsernameForm","React","action","type","name","placeholder","size","LinkedUser","_ref","username","href","PageTitle","_ref2","venueURL","_ref3","id","slugify","uniqBySongId","uniqBy","_ref4","song_id","FanStats","_ref5","user","shows","songs","teases","showIDs","Object","keys","venues","uniq","values","map","_ref6","venue","uniqSongs","uniqTeases","length","sort","showID","_shows$showID","date","key","Link","to","location","_ref7","song_name","tease","FanStatsPage","_ref8","_userJson$user","data","usernameRaw","URLSearchParams","search","get","_useState","useState","userJson","setUserJson","_useState2","showsData","setShowsData","_useState3","perfsData","setPerfsData","_useState4","teasesData","setTeasesData","useEffect","fetch","then","response","json","user_fields","JSON","parse","allSets","allSetsCsv","nodes","allSongPerfs","allSongperformancesCsv","allTeases","allTeasesCsv","allShows","allShowsCsv","allVenues","allVenuesCsv","findSongPerf","find","__","findSet","findShow","findVenue","filterTeases","filter","reduce","showDateString","showDMYYYY","split","replace","showData","propEq","_Object$assign","venue_id","assign","setIDs","show","concat","set1","set2","set3","encore1","encore2","Boolean","setID","flatMap","_ref9","setlist","String","songPerfID","perf","Layout","className","SEO","title","error"],"mappings":"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","file":"component---src-pages-fan-stats-js-ed7f5e49d3fa3662aa90.js","sourcesContent":["/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useEffect, useState} from 'react'\nimport {graphql, Link} from 'gatsby'\nimport {filter, find, propEq, sort, uniq, uniqBy, __} from 'ramda'\nimport slugify from 'slugify'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport './fan-stats.css'\n\nconst numericalSort = (a, b) => a - b\n\nconst UsernameForm = () => <form action=\"/fan-stats\">\n  <input type=\"text\" name=\"username\" placeholder=\"your username on The Lot\" size=\"30\" />\n  <button>generate stats</button>\n</form>\n\nconst LinkedUser = ({username}) => <a href={`https://lot.almost-dead.net/u/${username}/summary`}>@{username}</a>\n\nconst PageTitle = ({username}) => {\n  if (username) {\n    return <><LinkedUser username={username} />'s Fan Stats</>\n  }\n  return 'Fan Stats'\n}\n\nconst venueURL = ({id, name}) => `/venue/${id}-${slugify(name)}`\n\nconst extractSongId = ({song_id}) => song_id\nconst uniqBySongId = uniqBy(extractSongId)\n\nconst FanStats = ({user, shows, songs, teases}) => {\n  const showIDs = Object.keys(shows)\n  // const songIDs = Object.keys(songs)\n  const venues = uniq(Object.values(shows).map(({venue}) => venue))\n  const uniqSongs = uniqBySongId(songs)\n  const uniqTeases = uniqBySongId(teases)\n\n  return <>\n    <p><LinkedUser username={user.username} /> was at {pluralize(showIDs.length, 'show')} across {pluralize(venues.length, 'venue')}, with {pluralize(uniqSongs.length, 'different song')} performed, and {pluralize(uniqTeases.length, 'unique song')} teased!</p>\n\n    <h2>Shows</h2>\n    <ol>\n      {sort(numericalSort, showIDs).map((showID) => {\n        const {date, venue} = shows[showID]\n        return <li key={showID}>\n          <Link to={`/show/${showID}`}>{date}</Link>\n          {' at '}\n          <Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link>\n        </li>\n      })}\n    </ol>\n\n    <h2>Venues</h2>\n    <ol>\n      {venues.map((venue) => <li key={venue.id}><Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link></li>)}\n    </ol>\n\n    <h2>Songs</h2>\n    <ol>\n      {uniqSongs.map(({song_id, song_name}) => <li key={song_id}><Link to={`/song/${song_id}`}>{song_name}</Link></li>)}\n    </ol>\n\n    <h2>Teases</h2>\n    <ol>\n      {uniqTeases.map((tease) => <li key={tease.song_id}><Link to={`/song/${tease.song_id}`}>{tease.song_name}</Link></li>)}\n    </ol>\n  </>\n}\n\nexport default function FanStatsPage({location, data}) {\n  const usernameRaw = new URLSearchParams(location.search).get('username')\n  const [userJson, setUserJson] = useState()\n  const [showsData, setShowsData] = useState({})\n  const [perfsData, setPerfsData] = useState()\n  const [teasesData, setTeasesData] = useState()\n\n  useEffect(() => {\n    if (usernameRaw) {\n      fetch(`https://lot.almost-dead.net/u/${usernameRaw}.json`)\n        .then((response) => response.json())\n        .then((json) => {\n          if (json?.user) {\n            setUserJson({\n              user: json.user,\n              shows: json.user.user_fields[1]\n                ? JSON.parse(json.user.user_fields[1]) // TODO This will throw if the field is invalid JSON (which happens...)\n                : [],\n            })\n          }\n        })\n    }\n  }, [usernameRaw])\n\n  const {\n    allSetsCsv: {nodes: allSets},\n    allSongperformancesCsv: {nodes: allSongPerfs},\n    allTeasesCsv: {nodes: allTeases},\n    allShowsCsv: {nodes: allShows},\n    allVenuesCsv: {nodes: allVenues},\n  } = data\n  const findSongPerf = find(__, allSongPerfs)\n  const findSet = find(__, allSets)\n  const findShow = find(__, allShows)\n  const findVenue = find(__, allVenues)\n  const filterTeases = filter(__, allTeases)\n\n  useEffect(() => {\n    if (userJson?.shows) {\n      const shows = userJson.shows.reduce((showsData, showDateString) => {\n        const showDMYYYY = showDateString.split(' ')[0].replace(/\\/(\\d{2})$/, '/20$1')\n        const showData = findShow(propEq('date', showDMYYYY))\n        if (showData?.id) {\n          const venue = findVenue(propEq('id', showData.venue_id))\n          return {\n            ...showsData,\n            [showData.id]: {\n              ...showData,\n              venue,\n            },\n          }\n        }\n        return showsData\n      }, {})\n      setShowsData(shows)\n\n      const perfsData = Object.values(shows)\n        .reduce((setIDs, show) => setIDs.concat([show.set1, show.set2, show.set3, show.encore1, show.encore2].filter((id) => Boolean(id))), [])\n        // now it is an array of set ID strings...\n        .map((setID) => findSet(propEq('id', setID)))\n        .flatMap(({setlist}) => String(setlist).split(':'))\n        // now it is an array of songperf ID strings\n        .map((songPerfID) => findSongPerf(propEq('id', songPerfID)))\n        // now it is an array of songperf objs\n      setPerfsData(perfsData)\n\n      const teasesData = perfsData\n        .flatMap((perf) => filterTeases(propEq('performance_id', perf.id)))\n      setTeasesData(teasesData)\n    }\n  }, [userJson])\n\n  return <Layout className=\"fanstatspage\">\n    <SEO title=\"JRAD Fan Stats\" />\n    <h1><PageTitle username={userJson?.user?.username} /></h1>\n    {usernameRaw\n      ? userJson?.user\n        ? Object.keys(showsData).length\n          ? <FanStats shows={showsData} songs={perfsData} teases={teasesData} user={userJson.user} />\n          : <><p>No shows found! (Have you entered them in <a href=\"https://lot.almost-dead.net/my/preferences/profile\">your account preferences on The Lot</a>?)</p><UsernameForm/></>\n        : userJson?.error\n          ? <><p>Uh oh, error fetching data.</p><UsernameForm/></>\n          : <p>Loading...</p>\n      : <UsernameForm/>\n    }\n  </Layout>\n}\n\nexport const query = graphql`\n  query FanStatsData {\n    allVenuesCsv {\n      nodes {\n        id\n        name\n        location\n        capacity\n        generic_name\n        tagname\n      }\n    }\n    allShowsCsv {\n      nodes {\n        date\n        encore1\n        encore2\n        event\n        id\n        links\n        notes\n        num_recordings\n        set1\n        set2\n        set3\n        soundcheck\n        tagline\n        venue_id\n      }\n    }\n    allSetsCsv {\n      nodes {\n        id\n        setlist\n      }\n    }\n    allSongperformancesCsv {\n      nodes {\n        id\n        set_id\n        song_id\n        song_name\n      }\n    }\n    allTeasesCsv {\n      nodes {\n        id\n        performance_id\n        song_id\n        song_name\n      }\n    }\n  }\n`\n"],"sourceRoot":""}