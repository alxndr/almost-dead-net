{"version":3,"sources":["webpack://almost-dead-net/./src/release-stages.js","webpack://almost-dead-net/./src/components/header.js","webpack://almost-dead-net/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://almost-dead-net/./src/components/layout.js","webpack://almost-dead-net/./src/templates/song.js"],"names":["STAGES","releaseStage","global","document","location","hostname","Header","obj","TypeError","style","className","to","title","src","alt","defaultProps","children","id","href","Song","song","data","songsCsv","console","log","description","author","authorInfo","suite"],"mappings":"6KAAaA,EACH,SADGA,EAEN,MAFMA,EAGL,OAHKA,EAIF,UAGJ,SAASC,IACd,OAAQC,IAAOC,UAAYD,IAAOC,SAASC,SAASC,UAClD,IAAK,kBACH,OAAOL,EACT,IAAK,mBACH,OAAOA,EACT,IAAK,YACH,OAAOA,EACT,QACE,OAAOA,GCZb,IAAMM,EAAS,SAAC,GAAD,OCJA,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDGxB,IACb,0BAAQC,MAAO,IACb,gBAAC,KAAD,CAAMC,UAAU,cAAcC,GAAG,IAAIC,MAAM,6BACzC,uBAAKC,IAAI,kCAAkCC,IAAI,8BAQrDR,EAAOS,aAAe,GAGtB,QEWA,EAlBe,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,SAA8B,IAApBN,iBAAoB,MAAR,GAAQ,EAC7C,OACE,uBAAKA,UAAS,iBAAmBT,IAAnB,IAAqCS,GACjD,gBAAC,EAAD,MACA,4BAAOM,GACP,0BAAQC,GAAG,cAAcP,UAAU,UACjC,gBAAC,KAAD,CAAMA,UAAU,eAAeO,GAAG,cAAcN,GAAG,IAAIC,MAAM,uBAAsB,uBAAKC,IAAI,kCAAkCC,IAAI,0BAClI,gBAAC,KAAD,CAAMJ,UAAU,qBAAqBC,GAAG,SAASC,MAAM,kBAAvD,kBACA,qBAAGM,KAAK,8BAA8BR,UAAU,mBAAmBE,MAAM,wBAAuB,uBAAKC,IAAI,kCAAkCC,IAAI,+D,2HCWxI,SAASK,EAAT,GAIX,IAFUC,EAEX,EAHDC,KACEC,SAGF,OAAKF,GA2ELG,QAAQC,IAAI,YAAaJ,GAClB,gBAAC,IAAD,CAAQV,UAAU,YACvB,gBAAC,IAAD,CACEE,MAAK,IAAMQ,EAAKR,MAAX,0CACLa,YAAW,gFAAiFL,EAAKR,MAAtF,MAEb,sBAAIF,UAAU,kBAAkBU,EAAKR,OACrC,uBAAKF,UAAU,kBA5GnB,SAAoBgB,GAClB,YADiC,IAAfA,MAAS,MACnBA,GACN,KAAK,KACL,IAAK,GACH,OAAO,EACT,IAAK,cACH,OAAO,0CACT,QACE,OAAO,+BAAOA,IAqGbC,CAAWP,EAAKM,QAChBN,EAAKQ,OAAS,wCAAgBR,EAAKQ,MAArB,aAnFV","file":"component---src-templates-song-js-73b1ee5361701aabc225.js","sourcesContent":["export const STAGES = {\n  CANARY: 'canary',\n  DEV: 'dev',\n  PROD: 'prod',\n  UNKNOWN: 'unknown',\n}\n\nexport function releaseStage() {\n  switch (global.document && global.document.location.hostname) {\n    case 'almost-dead.net':\n      return STAGES.PROD\n    case 'alxndr.github.io':\n      return STAGES.CANARY\n    case 'localhost':\n      return STAGES.DEV\n    default:\n      return STAGES.UNKNOWN\n  }\n}\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nconst Header = ({}) => (\n  <header style={{}}>\n    <Link className=\"App__banner\" to=\"/\" title=\"Almost-Dead.net home page\">\n      <img src=\"https://i.imgur.com/q5cBEHG.png\" alt=\"Almost-Dead.net banner\" />\n    </Link>\n  </header>\n)\n\nHeader.propTypes = {\n}\n\nHeader.defaultProps = {\n}\n\nexport default Header\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nimport {releaseStage} from '../release-stages'\n\nimport Header from './header'\n\nimport './reset.css'\nimport './layout.css'\n\nconst Layout = ({children, className = ''}) => {\n  return (\n    <div className={`layout layout-${releaseStage()} ${className}`}>\n      <Header />\n      <main>{children}</main>\n      <footer id=\"site-footer\" className=\"footer\">\n        <Link className=\"footer__logo\" id=\"logo-bottom\" to=\"/\" title=\"return to home page\"><img src=\"https://i.imgur.com/tvtgYVY.png\" alt=\"Good Ol' Almost Dead\" /></Link>\n        <Link className=\"footer__link-about\" to=\"/about\" title=\"About the Site\">About the Site</Link>\n        <a href=\"https://lot.almost-dead.net\" className=\"footer__logo-lot\" title=\"JRAD Forum — The Lot\"><img src=\"https://i.imgur.com/Qi2NhJO.png\" alt=\"The Lot — a forum for fans of Joe Russo's Almost Dead\" /></a>\n      </footer>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport {graphql, Link} from 'gatsby'\nimport {find, propEq, uniqBy} from 'ramda'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './song.css'\n\nfunction authorInfo(author = null) {\n  switch (author) {\n    case null:\n    case '':\n      return false\n    case 'traditional':\n      return <p>(traditional)</p>\n    default:\n      return <p>by {author}</p>\n  }\n}\n\nconst SET_MAPPING = { // 'show table column name' to 'human readable set name'\n  soundcheck: 'soundcheck',\n  set1: 'set 1',\n  set2: 'set 2',\n  set3: 'set 3',\n  encore1: 'encore',\n  encore2: 'double encore',\n}\n\nexport default function Song({\n  data: {\n    songsCsv: song,\n  },\n}) {\n  if (!song) {\n    return <p>Uh oh, no song data found...</p>\n  }\n  /*\n  const attachMoreData = (performanceData) => {\n    console.log({performanceData})\n    const performanceIdStr = performanceData.id.toString()\n    const setData = find((set) => set.setlist && set.setlist.toString().split(':').includes(performanceIdStr))(sets)\n    const showData = find((show) => [\n      show.soundcheck,\n      show.set1,\n      show.set2,\n      show.set3,\n      show.encore1,\n      show.encore2\n    ].includes(setData.id))(shows)\n    const whichSet = Object.entries(SET_MAPPING).find(([col_name, readable_name]) => showData[col_name] === setData.id)[1]\n    const variation = performanceData.variation\n      ? `(${performanceData.variation})`\n      : false\n    return {performanceData, showData, variation, whichSet}\n  }\n\n  const performancesSorted = songPerformances\n    .map(attachMoreData)\n    .filter((data) => data && data.showData)\n    .sort((perfA, perfB) => {\n      const dateA = new Date(perfA.showData.date.split('/'))\n      const dateB = new Date(perfB.showData.date.split('/'))\n      if (dateA > dateB) {\n        return -1\n      }\n      if (dateA < dateB) {\n        return 1\n      }\n      return 0\n    })\n  const uniqShows = uniqBy((perf) => perf.showData.id, performancesSorted)\n  const performances = performancesSorted\n    .map(({performanceData, showData, variation, whichSet}) => {\n      return <li key={performanceData.id}>\n        <Link to={`/show/${showData.id}`}>\n          {showData.date} {variation} in {whichSet}\n        </Link>\n      </li>\n    })\n  const performancesComponent = songPerformances.length > 0\n    ?  <>\n      <h2>Performed at {`${uniqShows.length} Show${uniqShows.length === 1 ? '' : 's'}`}</h2>\n      <ul>\n        {performances}\n      </ul>\n    </>\n    : false\n\n  const teasesComponent = false && teases.length > 0\n    ? <>\n      <h2>Teases</h2>\n      <ul>\n        {teases.map(teaseData => {\n          const performanceData = find(propEq('id', teaseData.performance_id))(teasePerformances)\n          if (!performanceData || !performanceData.id) {\n            return false\n          }\n          const setData = find((set) => set.setlist.toString().split(':').includes(performanceData.id.toString()))(sets)\n          const showData = find((show) => [show.soundcheck, show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(shows)\n          return <li key={teaseData.id}>\n            <Link to={`/show/${showData.id}`}>{showData.date} within {teaseData.within} {performanceData.variation && `(${performanceData.variation})`} </Link>\n          </li>\n        })}\n      </ul>\n    </>\n    : false\n  */\n\n  console.log('song data', song)\n  return <Layout className=\"songpage\">\n    <SEO\n      title={`\"${song.title}\" performances/teases … Almost-Dead.net`}\n      description={`List of each time Joe Russo's Almost Dead has performed or teased the song \"${song.title}\"`}\n    />\n    <h1 className=\"songpage__name\">{song.title}</h1>\n    <div className=\"songpage__info\">\n      {authorInfo(song.author)}\n      {song.suite && <p>Part of the {song.suite} suite</p>}\n    </div>\n    {/*\n    <div className=\"songpage__performances\">{performancesComponent}</div>\n    <div className=\"songpage__teases\">{teasesComponent}</div>\n    */}\n  </Layout>\n}\n\nexport const query = graphql`\n  query($songId: String!) {\n    songsCsv(id: {eq: $songId}) {\n      author\n      suite\n      title\n      performances\n    }\n  }\n`\n\n/*\n    const teaseRows = filter(propEq('song_id', song.id))(teases)\n    const teasePerfIds = teaseRows.map((row) => row.performance_id)\n        teasePerformances: filter((perf) => teasePerfIds.includes(perf.id))(performances),\n    allTeasePerformancesCsv { nodes {\n    } }\n\n    allSetsCsv { nodes {\n      setlist\n    } }\n    allShowsCsv { nodes {\n      encore1\n      encore2\n      set1\n      set2\n      set3\n      soundcheck\n    } }\n    allSongperformancesCsv { nodes {\n      id\n      variation\n    } }\n    allTeasesCsv { nodes {\n      performance_id\n      within\n    } }\n*/\n"],"sourceRoot":""}