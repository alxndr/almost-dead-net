{"version":3,"file":"component---src-pages-fan-stats-js-f30b7678fc2bddc1b5ec.js","mappings":"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","sources":["webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/pages/fan-stats.js"],"sourcesContent":["/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useEffect, useState} from 'react'\nimport {graphql, Link} from 'gatsby'\nimport {filter, find, propEq, sort, uniq, uniqBy, __} from 'ramda'\nimport slugify from 'slugify'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport './fan-stats.css'\n\nconst numericalSort = (a, b) => a - b\n\nconst UsernameForm = () => <form action=\"/fan-stats\">\n  <input type=\"text\" name=\"username\" placeholder=\"your username on The Lot\" size=\"30\" />\n  <button>generate stats</button>\n</form>\n\nconst LinkedUser = ({username}) => <a href={`https://lot.almost-dead.net/u/${username}/summary`}>@{username}</a>\n\nconst PageTitle = ({username}) => {\n  if (username) {\n    return <><LinkedUser username={username} />'s Fan Stats</>\n  }\n  return 'Fan Stats'\n}\n\nconst venueURL = ({id, name}) => `/venue/${id}-${slugify(name)}`\n\nconst extractSongId = ({song_id}) => song_id\nconst uniqBySongId = uniqBy(extractSongId)\n\nconst FanStats = ({user, shows, songs, teases}) => {\n  const showIDs = Object.keys(shows)\n  // const songIDs = Object.keys(songs)\n  const venues = uniq(Object.values(shows).map(({venue}) => venue))\n  const uniqSongs = uniqBySongId(songs)\n  const uniqTeases = uniqBySongId(teases)\n\n  return <>\n    <p><LinkedUser username={user.username} /> was at {pluralize(showIDs.length, 'show')} across {pluralize(venues.length, 'venue')}, with {pluralize(uniqSongs.length, 'different song')} performed, and {pluralize(uniqTeases.length, 'unique song')} teased!</p>\n\n    <h2>Shows</h2>\n    <ol>\n      {sort(numericalSort, showIDs).map((showID) => {\n        const {date, venue} = shows[showID]\n        return <li key={showID}>\n          <Link to={`/show/${showID}`}>{date}</Link>\n          {' at '}\n          <Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link>\n        </li>\n      })}\n    </ol>\n\n    <h2>Venues</h2>\n    <ol>\n      {venues.map((venue) => <li key={venue.id}><Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link></li>)}\n    </ol>\n\n    <h2>Songs</h2>\n    <ol>\n      {uniqSongs.map(({song_id, song_name}) => <li key={song_id}><Link to={`/song/${song_id}`}>{song_name}</Link></li>)}\n    </ol>\n\n    <h2>Teases</h2>\n    <ol>\n      {uniqTeases.map((tease) => <li key={tease.song_id}><Link to={`/song/${tease.song_id}`}>{tease.song_name}</Link></li>)}\n    </ol>\n  </>\n}\n\nexport default function FanStatsPage({location, data}) {\n  const usernameRaw = new URLSearchParams(location.search).get('username')\n  const [userJson, setUserJson] = useState()\n  const [showsData, setShowsData] = useState({})\n  const [perfsData, setPerfsData] = useState()\n  const [teasesData, setTeasesData] = useState()\n\n  useEffect(() => {\n    if (usernameRaw) {\n      fetch(`https://lot.almost-dead.net/u/${usernameRaw}.json`)\n        .then((response) => response.json())\n        .then((json) => {\n          if (json?.user) {\n            setUserJson({\n              user: json.user,\n              shows: json.user.user_fields[1]\n                ? JSON.parse(json.user.user_fields[1]) // TODO This will throw if the field is invalid JSON (which happens...)\n                : [],\n            })\n          }\n        })\n    }\n  }, [usernameRaw])\n\n  const {\n    allSetsCsv: {nodes: allSets},\n    allSongperformancesCsv: {nodes: allSongPerfs},\n    allTeasesCsv: {nodes: allTeases},\n    allShowsCsv: {nodes: allShows},\n    allVenuesCsv: {nodes: allVenues},\n  } = data\n  const findSongPerf = find(__, allSongPerfs)\n  const findSet = find(__, allSets)\n  const findShow = find(__, allShows)\n  const findVenue = find(__, allVenues)\n  const filterTeases = filter(__, allTeases)\n\n  useEffect(() => {\n    if (userJson?.shows) {\n      const shows = userJson.shows.reduce((showsData, showDateString) => {\n        const showDMYYYY = showDateString.split(' ')[0].replace(/\\/(\\d{2})$/, '/20$1')\n        const showData = findShow(propEq('date', showDMYYYY))\n        if (showData?.id) {\n          const venue = findVenue(propEq('id', showData.venue_id))\n          return {\n            ...showsData,\n            [showData.id]: {\n              ...showData,\n              venue,\n            },\n          }\n        }\n        return showsData\n      }, {})\n      setShowsData(shows)\n\n      const perfsData = Object.values(shows)\n        .reduce((setIDs, show) => setIDs.concat([show.set1, show.set2, show.set3, show.encore1, show.encore2].filter((id) => Boolean(id))), [])\n        // now it is an array of set ID strings...\n        .map((setID) => findSet(propEq('id', setID)))\n        .flatMap(({setlist}) => String(setlist).split(':'))\n        // now it is an array of songperf ID strings\n        .map((songPerfID) => findSongPerf(propEq('id', songPerfID)))\n        // now it is an array of songperf objs\n      setPerfsData(perfsData)\n\n      const teasesData = perfsData\n        .flatMap((perf) => filterTeases(propEq('performance_id', perf.id)))\n      setTeasesData(teasesData)\n    }\n  }, [userJson])\n\n  return <Layout className=\"fanstatspage\">\n    <SEO title=\"JRAD Fan Stats\" />\n    <h1><PageTitle username={userJson?.user?.username} /></h1>\n    {usernameRaw\n      ? userJson?.user\n        ? Object.keys(showsData).length\n          ? <FanStats shows={showsData} songs={perfsData} teases={teasesData} user={userJson.user} />\n          : <><p>No shows found! (Have you entered them in <a href=\"https://lot.almost-dead.net/my/preferences/profile\">your account preferences on The Lot</a>?)</p><UsernameForm/></>\n        : userJson?.error\n          ? <><p>Uh oh, error fetching data.</p><UsernameForm/></>\n          : <p>Loading...</p>\n      : <UsernameForm/>\n    }\n  </Layout>\n}\n\nexport const query = graphql`\n  query FanStatsData {\n    allVenuesCsv {\n      nodes {\n        id\n        name\n        location\n        capacity\n        generic_name\n        tagname\n      }\n    }\n    allShowsCsv {\n      nodes {\n        date\n        encore1\n        encore2\n        event\n        id\n        links\n        notes\n        num_recordings\n        set1\n        set2\n        set3\n        soundcheck\n        tagline\n        venue_id\n      }\n    }\n    allSetsCsv {\n      nodes {\n        id\n        setlist\n      }\n    }\n    allSongperformancesCsv {\n      nodes {\n        id\n        set_id\n        song_id\n        song_name\n      }\n    }\n    allTeasesCsv {\n      nodes {\n        id\n        performance_id\n        song_id\n        song_name\n      }\n    }\n  }\n`\n"],"names":["pluralize","number","word","numericalSort","a","b","UsernameForm","React","action","type","name","placeholder","size","LinkedUser","_ref","username","href","PageTitle","_ref2","venueURL","_ref3","id","slugify","uniqBySongId","uniqBy","_ref4","song_id","FanStats","_ref5","user","shows","songs","teases","showIDs","Object","keys","venues","uniq","values","map","_ref6","venue","uniqSongs","uniqTeases","length","sort","showID","date","key","Link","to","location","_ref7","song_name","tease","FanStatsPage","_ref8","_userJson$user","data","usernameRaw","URLSearchParams","search","get","userJson","setUserJson","useState","showsData","setShowsData","perfsData","setPerfsData","teasesData","setTeasesData","useEffect","fetch","then","response","json","user_fields","JSON","parse","allSetsCsv","nodes","allSets","allSongperformancesCsv","allSongPerfs","allTeasesCsv","allTeases","allShowsCsv","allShows","allVenuesCsv","allVenues","findSongPerf","find","__","findSet","findShow","findVenue","filterTeases","filter","reduce","showDateString","showDMYYYY","split","replace","showData","propEq","venue_id","setIDs","show","concat","set1","set2","set3","encore1","encore2","Boolean","setID","flatMap","_ref9","setlist","String","songPerfID","perf","Layout","className","SEO","title","error"],"sourceRoot":""}