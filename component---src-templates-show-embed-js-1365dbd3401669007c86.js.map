{"version":3,"sources":["webpack://almost-dead-net/./src/templates/show-embed.js"],"names":["Guests","guests","length","map","guest","name","join","Set","show","which","isEncore","sets","performances","segues","teases","songs","setId","setData","find","propEq","setlist","normalizeSetlist","key","id","ShowEmbed","data","showsCsv","venue","venuesCsv","allSetsCsv","nodes","allGuestsCsv","allSongperformancesCsv","allSeguesCsv","allSongsCsv","allTeasesCsv","console","error","date","event","notes","guestsWithSplitShows","guestData","shows","Number","isInteger","toString","split","filter","showGuests","where","includes","reduce","setlists","concat","encores","showName","location","className","title","description","rel","href","soundcheck"],"mappings":"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","file":"component---src-templates-show-embed-js-1365dbd3401669007c86.js","sourcesContent":["import React from 'react'\nimport {filter, find, includes, propEq, where} from 'ramda'\nimport {graphql} from 'gatsby'\nimport {Helmet} from 'react-helmet'\n\nimport SEO from \"../components/seo\"\nimport Setlist from '../components/setlist'\n\nimport {normalizeSetlist} from '../components/helpers/setlist-helper'\n\nimport './show-embed.css'\n\nfunction Guests({guests}) {\n  if (guests.length) {\n    return <p>With {guests.map((guest) => guest.name).join(', ')}</p>\n  }\n  return false\n}\n\nfunction Set({show, which, isEncore = false, sets, performances, segues, teases, songs}) {\n  const what = which === 'soundcheck'\n    ? 'soundcheck'\n    : `${isEncore ? 'encore' : 'set'}${which}`\n  const setId = show[what]\n  if (!setId || !sets || !sets.length) {\n    return false\n  }\n  const setData = find(propEq('id', setId))(sets)\n  const setlist = normalizeSetlist(setData.setlist)\n  return <Setlist\n    isEncore={isEncore}\n    which={which}\n    key={setData.id}\n    setlist={setlist}\n    performances={performances}\n    segues={segues}\n    songs={songs}\n    teases={teases}\n  />\n}\n\nexport default function ShowEmbed({data: {\n  showsCsv: show,\n  venuesCsv: venue,\n  allSetsCsv: {nodes: sets},\n  allGuestsCsv: {nodes: guests},\n  allSongperformancesCsv: {nodes: performances},\n  allSeguesCsv: {nodes: segues},\n  allSongsCsv: {nodes: songs},\n  allTeasesCsv: {nodes: teases},\n}}) {\n  if (!show) {\n    console.error('Show page, missing show..............')\n    return false\n  }\n\n  const {date, event, notes} = show\n\n  const guestsWithSplitShows = guests.map((guestData) => {\n    if (!guestData) {\n      return null\n    }\n    if (!guestData.shows) {\n      return null\n    }\n    if (Number.isInteger(guestData.shows)) {\n      return {\n        ...guestData,\n        shows: [guestData.shows.toString()]\n      }\n    }\n    return {\n      ...guestData,\n      shows: guestData.shows.split(':')\n    }\n  }).filter((data) => !!data)\n  const showGuests = filter(where({shows: includes(show.id)}))(guestsWithSplitShows)\n\n  const setlist = [1, 2, 3].reduce((setlists, which) => setlists.concat(\n    <Set which={which} show={show} performances={performances} sets={sets} segues={segues} teases={teases} songs={songs} />\n  ), [])\n  const encores = [1, 2].reduce((encores, which) => encores.concat(\n    <Set isEncore={true} which={which} show={show} performances={performances} sets={sets} segues={segues} teases={teases} songs={songs} />\n  ), [])\n\n  const showName = `${event ? `${event}, ` : ``}${venue.name} (${venue.location})`\n\n  return <div className=\"showpage-embed\">\n    <SEO\n      title={`JRAD ${date} @ ${showName}`}\n      description={`Joe Russo's Almost Dead${showGuests.length ? ` with ${showGuests.map((guest) => guest.name).join(' and ')}` : ''} at ${showName} ${date} â€” setlist, teases, recordings`}\n    />\n    <Helmet>\n      <link rel=\"canonical\" href={`/show/${show.id}`} />\n    </Helmet>\n    <h1 className=\"showpage__pagetitle\">\n      <span className=\"showpage__pagetitle--date\">{date}</span>\n      {' '}\n      {event && <span className=\"showpage__pagetitle--event\">{event}</span>}\n      {' '}\n      {venue && <span className=\"showpage__pagetitle--venue\">{venue.name}, {venue.location}</span>}\n    </h1>\n    <section className=\"showpage__setlist\">\n      <Guests guests={showGuests} />\n      {show.soundcheck && <Set which=\"soundcheck\" show={show} performances={performances} sets={sets} segues={segues} teases={teases} songs={songs} />}\n      {setlist.length ? setlist : <p>Uh oh, no sets found.</p>}\n      {encores.length && encores}\n      {notes && <div className=\"showpage__notes\">{notes}</div>}\n    </section>\n  </div>\n}\n\nexport const query = graphql`\n  query($showId: String!, $venueId: String!) {\n    showsCsv(id: {eq: $showId}) {\n      id\n      date\n      encore1\n      encore2\n      event\n      notes\n      set1\n      set2\n      set3\n    }\n    venuesCsv(id: {eq: $venueId}) {\n      id\n      location\n      name\n    }\n    allSetsCsv { nodes {\n      id\n      setlist\n    }}\n    allGuestsCsv { nodes {\n      id\n      name\n      shows\n    } }\n    allSongperformancesCsv { nodes {\n      id\n      next_perfid\n      notes\n      prev_perfid\n      showgap\n      song_id\n      variation\n    } }\n    allSongsCsv { nodes {\n      id\n      author\n      core_gd\n      core_jrad\n      suite\n      title\n    } }\n    allSeguesCsv { nodes {\n      id\n      from_perf_id\n      type\n    } }\n    allTeasesCsv { nodes {\n      id\n      performance_id\n      song_name\n    } }\n  }\n`\n"],"sourceRoot":""}