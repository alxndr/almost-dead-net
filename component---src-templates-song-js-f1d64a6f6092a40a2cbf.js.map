{"version":3,"file":"component---src-templates-song-js-f1d64a6f6092a40a2cbf.js","mappings":"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","sources":["webpack://almost-dead-net/./node_modules/classnames/index.js","webpack://almost-dead-net/./src/components/link-with-previous-url.js","webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/templates/song.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  function classNames() {\n    var classes = '';\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (arg) {\n        classes = appendClass(classes, parseValue(arg));\n      }\n    }\n    return classes;\n  }\n  function parseValue(arg) {\n    if (typeof arg === 'string' || typeof arg === 'number') {\n      return arg;\n    }\n    if (typeof arg !== 'object') {\n      return '';\n    }\n    if (Array.isArray(arg)) {\n      return classNames.apply(null, arg);\n    }\n    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n      return arg.toString();\n    }\n    var classes = '';\n    for (var key in arg) {\n      if (hasOwn.call(arg, key) && arg[key]) {\n        classes = appendClass(classes, key);\n      }\n    }\n    return classes;\n  }\n  function appendClass(value, newClass) {\n    if (!newClass) {\n      return value;\n    }\n    if (value) {\n      return value + ' ' + newClass;\n    }\n    return value + newClass;\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from 'react'\nimport {Location} from '@reach/router'\nimport {Link} from 'gatsby'\n\nconst LinkWithPrevUrl = ({children, state, ...rest}) => (\n  <Location>\n    {({location}) =>\n      <Link {...rest} state={{previousUrl: location.href, ...state}}>\n        {children}\n      </Link>\n    }\n  </Location>\n)\n\nexport default LinkWithPrevUrl\n","/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useMemo} from 'react'\nimport {useSortBy, useTable} from 'react-table'\nimport {graphql} from 'gatsby'\nimport {find, propEq} from 'ramda'\nimport classnames from 'classnames'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Link from '../components/link-with-previous-url'\n\nimport './song.css'\n\nfunction authorInfo(author = null) {\n  switch (author) {\n    case null:\n    case '':\n      return false\n    case 'traditional':\n      return <p>(traditional)</p>\n    default:\n      return <p>by {author}</p>\n  }\n}\n\nfunction sortSets(a,b) {\n  if (a.values.whichSet === 'soundcheck')\n    return -1;\n  if (b.values.whichSet === 'soundcheck')\n    return 1;\n  if (a.values.whichSet === 'set 1')\n    return -1;\n  if (b.values.whichSet === 'set 1')\n    return 1;\n  if (a.values.whichSet === 'set 2')\n    return -1;\n  if (b.values.whichSet === 'set 2')\n    return 1;\n  if (a.values.whichSet === 'set 3')\n    return -1;\n  if (b.values.whichSet === 'set 3')\n    return 1;\n  if (a.values.whichSet === 'encore')\n    return -1;\n  if (b.values.whichSet === 'encore')\n    return 1;\n  if (a.values.whichSet === 'double encore')\n    return -1;\n  if (b.values.whichSet === 'double encore')\n    return 1;\n}\n\nconst SET_MAPPING = { // 'show table column name' to 'human readable set name'\n  soundcheck: 'soundcheck',\n  set1: 'set 1',\n  set2: 'set 2',\n  set3: 'set 3',\n  encore1: 'encore',\n  encore2: 'double encore',\n}\n\nexport const query = graphql`\n  query SongTemplate($songId: String!) {\n    songsCsv(id: {eq: $songId}) {\n      id\n      author\n      suite\n      title\n      nicknames\n      performances\n    }\n    allSeguesCsv { nodes {\n      id\n      from_perf_id\n      to_perf_id\n      type\n    }}\n    allSetsCsv { nodes {\n      id\n      setlist\n    } }\n    allShowsCsv { nodes {\n      id\n      date\n      encore1\n      encore2\n      set1\n      set2\n      set3\n      soundcheck\n    } }\n    allSongperformancesCsv { nodes {\n      id\n      song_id\n      song_name\n      stars\n    } }\n    allTeasesCsv(filter: {song_id: {eq: $songId}}) { nodes {\n      id\n      performance_id\n      within\n    } }\n  }\n`\n\nfunction renderCell({column, render, row}, previousUrl='') {\n  let url;\n  if (column.id === 'show')\n    url = `/show/${row.original.fullData.showData.id}`\n  else if (column.id === 'prior' && row.original.fullData.prior.song_id)\n    url = `/song/${row.original.fullData.prior.song_id}`\n  else if (column.id ===  'after' && row.original.fullData.after.song_id)\n    url = `/song/${row.original.fullData.after.song_id}`\n  if (url)\n    return <Link to={url} className={classnames({highlight: previousUrl.endsWith(url)})}>{render('Cell')}</Link>;\n  return render('Cell')\n}\n\nfunction SortableTable({columns, data, previousUrl=''}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({columns, data}, useSortBy)\n  return <table {...getTableProps()} className=\"sortable\">\n    <thead>\n      {headerGroups.map(headerGroup =>\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column =>\n            <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                className={`sortable__cell-${column.id} ${column.isSorted ? column.isSortedDesc ? 'sorted-desc' : 'sorted-asc' : ''}`}>\n              {column.render('Header')}\n            </th>\n          )}\n        </tr>\n      )}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row) // no return value; mutates `row`?\n        return <tr {...row.getRowProps()} className={classnames({[`stars-${row.original.stars}`]: row.original.stars})}>\n          {row.cells.map(cell => {\n            const classNameTd = classnames({\n              blank: cell.value === '[opener]' || cell.value === '[closer]',\n              [`sortable__cell-${cell.column.id}`]: true,\n            })\n            return <td {...cell.getCellProps()} className={classNameTd}>{renderCell(cell, previousUrl)}</td>\n          })}\n        </tr>\n      })}\n    </tbody>\n  </table>\n}\n\nexport default function Song({data: {\n  songsCsv: song,\n  allSeguesCsv: {nodes: allSegues},\n  allSetsCsv: {nodes: allSets},\n  allShowsCsv: {nodes: allShows},\n  allSongperformancesCsv: {nodes: allSongPerformances},\n  allTeasesCsv: {nodes: teases},\n}, location}) {\n  if (!song) {\n    return <p>Uh oh, no song data found...</p>\n  }\n  const onlyThisSongsPerformanceIds = song.performances.split(':')\n  if (!allSongPerformances.length) {\n    throw new Error('No data for allSongPerformances')\n  }\n  if (!allShows.length) {\n    throw new Error('No data for allShows')\n  }\n  if (!allSets.length) {\n    throw new Error('No data for allSets')\n  }\n  if (!allSegues.length) {\n    throw new Error('No data for allSegues')\n  }\n  const onlyThisSongsPerformancesData = allSongPerformances\n    .filter((songPerformance) => onlyThisSongsPerformanceIds.includes(songPerformance.id))\n    .map((performanceData) => {\n      const performanceIdStr = performanceData.id.toString()\n      const setData = find((set) =>\n        set.setlist && set.setlist.toString().split(':').includes(performanceIdStr)\n      )(allSets)\n      if (!setData)\n        throw new Error('No setData', {song, performanceData, allSets})\n      const showData = find((show) => [\n        show.soundcheck,\n        show.set1,\n        show.set2,\n        show.set3,\n        show.encore1,\n        show.encore2\n      ].includes(setData.id))(allShows)\n      if (!showData) {\n        throw new Error('No showData', {song, performanceData, setData, allShows})\n      }\n      const setIdsInts = String(setData.setlist).split(':')\n      const perfPositionInSet = setIdsInts.indexOf(performanceIdStr)\n      let prior;\n      if (perfPositionInSet > 0) {\n        const perfPriorId = setIdsInts[perfPositionInSet - 1]\n        prior = allSongPerformances.find(songPerf => songPerf.id === perfPriorId) // TODO refactor to use an object lookup\n        prior.segue = find(propEq('to_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else prior = {song_name: '[opener]'}\n      let after;\n      if (perfPositionInSet < setIdsInts.length - 1) {\n        after = allSongPerformances.find(songPerf => songPerf.id === setIdsInts[perfPositionInSet + 1])\n        after.segue = find(propEq('from_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else after = {song_name: '[closer]'}\n      const whichSet = Object.entries(SET_MAPPING)\n        .find(([col_name, _readable_name]) => showData[col_name] === setData.id)[1]\n      const variation = performanceData.variation\n        ? `(${performanceData.variation})`\n        : false\n      return {\n        show: showData.date,\n        prior: prior?.song_name,\n        'segue_prior': prior?.segue,\n        title: song.nicknames.split('; ')[0] || song.title,\n        stars: performanceData.stars,\n        'segue_after': after?.segue,\n        after: after?.song_name,\n        whichSet,\n        fullData: {performanceData, showData, variation, whichSet, prior, after}\n      }\n    })\n\n  const performancesData = useMemo(() => onlyThisSongsPerformancesData, [])\n  const performancesColumns = useMemo(\n    () => [\n      {accessor: 'show', Header: 'show', sortType: (a,b) => new Date(a.values.show).getTime() - new Date(b.values.show).getTime()}, // TODO memoize this fn\n      {accessor: 'whichSet', Header: 'where', sortType: sortSets},\n      {accessor: 'prior', Header: 'prior song'}, // TODO Filter out the/a\n      {accessor: 'segue_prior', Header: '>'},\n      {accessor: 'title', disableSortBy: true},\n      {accessor: 'segue_after', Header: '>'},\n      {accessor: 'after', Header: 'following song'}, // TODO Filter out the/a\n    ],\n    []\n  )\n\n  return <Layout className=\"songpage\">\n    <SEO\n      title={`\"${song.title}\" performed or teased by JRAD`}\n      description={`List of each time Joe Russo's Almost Dead has performed or teased the song \"${song.title}\" ${song.author && song.author !== 'traditional' ? `by ${song.author}` : ''}`}\n    />\n\n    <h1 className=\"songpage__name\">{song.title}</h1>\n    <div className=\"songpage__info\">\n      {authorInfo(song.author)}\n      {song.suite && <p>Part of the {song.suite} suite</p>}\n    </div>\n\n    {Boolean(performancesData.length) && // TODO verify that this count is accurate if a song is played twice in one show...\n      <div className=\"songpage__performances\">\n        <h2>Performed at {pluralize(performancesData.length, 'Show')}</h2>\n        <SortableTable\n          data={performancesData}\n          columns={performancesColumns}\n          previousUrl={location?.state?.previousUrl}\n        />\n      </div>\n    }\n\n    {Boolean(teases.length) &&\n      <div className=\"songpage__teases\">\n        <h2>Teases / Jams</h2>\n        <ul>\n          {teases.map(teaseData => {\n            const performanceData = find(propEq('id', teaseData.performance_id))(allSongPerformances)\n            if (!(performanceData?.id)) {\n              return false\n            }\n            const setData = find((set) => set.setlist.toString().split(':').includes(performanceData.id.toString()))(allSets)\n            const showData = find((show) => [show.soundcheck, show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(allShows)\n            const url = `/show/${showData.id}`\n            return <li key={teaseData.id} className={classnames({highlight: location?.state?.previousUrl?.endsWith(url)})}>\n              <Link to={url}>{showData.date} within {teaseData.within} {performanceData.variation && `(${performanceData.variation})`}</Link>\n            </li>\n          })}\n        </ul>\n      </div>\n    }\n  </Layout>\n}\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","module","exports","default","_ref","children","state","rest","React","Location","_ref2","location","Link","assign","previousUrl","href","pluralize","number","word","sortSets","a","b","values","whichSet","SET_MAPPING","soundcheck","set1","set2","set3","encore1","encore2","SortableTable","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","useSortBy","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","id","isSorted","isSortedDesc","render","row","getRowProps","classnames","original","stars","cells","cell","classNameTd","blank","getCellProps","url","fullData","showData","prior","song_id","after","to","highlight","endsWith","renderCell","Song","_ref3","_location$state","songsCsv","song","allSeguesCsv","nodes","allSegues","allSetsCsv","allSets","allShowsCsv","allShows","allSongperformancesCsv","allSongPerformances","allTeasesCsv","teases","onlyThisSongsPerformanceIds","performances","split","Error","onlyThisSongsPerformancesData","filter","songPerformance","performanceData","_prior","_prior2","_after","_after2","performanceIdStr","setData","find","set","setlist","show","setIdsInts","String","perfPositionInSet","indexOf","_find","perfPriorId","songPerf","segue","propEq","type","song_name","_find2","entries","_ref4","col_name","_readable_name","variation","date","title","nicknames","performancesData","useMemo","performancesColumns","accessor","Header","sortType","Date","getTime","disableSortBy","Layout","SEO","description","author","authorInfo","suite","Boolean","teaseData","_location$state2","_location$state2$prev","performance_id","within"],"sourceRoot":""}