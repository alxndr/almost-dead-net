{"version":3,"sources":["webpack://almost-dead-net/./src/components/header.js","webpack://almost-dead-net/./src/components/layout.js","webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/pages/fan-stats.js"],"names":["Header","className","to","title","src","alt","defaultProps","children","href","pluralize","number","word","numericalSort","a","b","UsernameForm","action","type","name","placeholder","size","LinkedUser","username","PageTitle","venueURL","id","slugify","uniqBySongId","uniqBy","song_id","FanStats","user","shows","songs","teases","showIDs","Object","keys","venues","uniq","values","map","venue","uniqSongs","uniqTeases","length","sort","showID","date","key","location","song_name","tease","FanStatsPage","data","usernameRaw","URLSearchParams","search","get","useState","userJson","setUserJson","showsData","setShowsData","perfsData","setPerfsData","teasesData","setTeasesData","useEffect","fetch","then","response","json","user_fields","JSON","parse","allSets","allSetsCsv","nodes","allSongPerfs","allSongperformancesCsv","allTeases","allTeasesCsv","allShows","allShowsCsv","allVenues","allVenuesCsv","findSongPerf","find","__","findSet","findShow","findVenue","filterTeases","filter","reduce","showDateString","showDMYYYY","split","replace","showData","propEq","venue_id","setIDs","show","concat","set1","set2","set3","encore1","encore2","Boolean","setID","flatMap","setlist","String","songPerfID","perf","error"],"mappings":"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","file":"component---src-pages-fan-stats-js-4e43a0d977733b6f15e8.js","sourcesContent":["import * as React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = () => (\n  <header>\n    <Link className=\"App__banner\" to=\"/\" title=\"Almost-Dead.net home page\">\n      <img src=\"https://i.imgur.com/q5cBEHG.png\" alt=\"Almost-Dead.net banner\" />\n    </Link>\n  </header>\n)\n\nHeader.propTypes = {\n}\n\nHeader.defaultProps = {\n}\n\nexport default Header\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Link} from \"gatsby\"\n\nimport Header from './header'\n\nimport './reset.css'\nimport './layout.css'\n\nconst Layout = ({children, className = ''}) => {\n  return (\n    <div className={`layout ${className}`}>\n\n      <Header />\n\n      <main>\n        {children}\n      </main>\n\n      <footer>\n        <Link className=\"footer__home\" to=\"/\" title=\"return to home page\">\n          Home\n        </Link>\n        <Link className=\"footer__link-about\" to=\"/about\" title=\"About the Site\">\n          About\n        </Link>\n        <a href=\"https://lot.almost-dead.net\" className=\"footer__forum\" title=\"JRAD Forum â€” The Lot\">\n          Forum\n        </a>\n      </footer>\n\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useEffect, useState} from 'react'\nimport {graphql, Link} from 'gatsby'\nimport {filter, find, propEq, sort, uniq, uniqBy, __} from 'ramda'\nimport slugify from 'slugify'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport './fan-stats.css'\n\nconst numericalSort = (a, b) => a - b\n\nconst UsernameForm = () => <form action=\"/fan-stats\">\n  <input type=\"text\" name=\"username\" placeholder=\"your username on The Lot\" size=\"30\" />\n  <button>generate stats</button>\n</form>\n\nconst LinkedUser = ({username}) => <a href={`https://lot.almost-dead.net/u/${username}/summary`}>@{username}</a>\n\nconst PageTitle = ({username}) => {\n  if (username) {\n    return <><LinkedUser username={username} />'s Fan Stats</>\n  }\n  return 'Fan Stats'\n}\n\nconst venueURL = ({id, name}) => `/venue/${id}-${slugify(name)}`\n\nconst extractSongId = ({song_id}) => song_id\nconst uniqBySongId = uniqBy(extractSongId)\n\nconst FanStats = ({user, shows, songs, teases}) => {\n  const showIDs = Object.keys(shows)\n  // const songIDs = Object.keys(songs)\n  const venues = uniq(Object.values(shows).map(({venue}) => venue))\n  const uniqSongs = uniqBySongId(songs)\n  const uniqTeases = uniqBySongId(teases)\n\n  return <>\n    <p><LinkedUser username={user.username} /> was at {pluralize(showIDs.length, 'show')} across {pluralize(venues.length, 'venue')}, with {pluralize(uniqSongs.length, 'different song')} performed, and {pluralize(uniqTeases.length, 'unique song')} teased!</p>\n\n    <h2>Shows</h2>\n    <ol>\n      {sort(numericalSort, showIDs).map((showID) => {\n        const {date, venue} = shows[showID]\n        return <li key={showID}>\n          <Link to={`/show/${showID}`}>{date}</Link>\n          {' at '}\n          <Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link>\n        </li>\n      })}\n    </ol>\n\n    <h2>Venues</h2>\n    <ol>\n      {venues.map((venue) => <li key={venue.id}><Link to={venueURL(venue)}>{venue.name}, {venue.location}</Link></li>)}\n    </ol>\n\n    <h2>Songs</h2>\n    <ol>\n      {uniqSongs.map(({song_id, song_name}) => <li key={song_id}><Link to={`/song/${song_id}`}>{song_name}</Link></li>)}\n    </ol>\n\n    <h2>Teases</h2>\n    <ol>\n      {uniqTeases.map((tease) => <li key={tease.song_id}><Link to={`/song/${tease.song_id}`}>{tease.song_name}</Link></li>)}\n    </ol>\n  </>\n}\n\nexport default function FanStatsPage({location, data}) {\n  const usernameRaw = new URLSearchParams(location.search).get('username')\n  const [userJson, setUserJson] = useState()\n  const [showsData, setShowsData] = useState({})\n  const [perfsData, setPerfsData] = useState()\n  const [teasesData, setTeasesData] = useState()\n\n  useEffect(() => {\n    if (usernameRaw) {\n      fetch(`https://lot.almost-dead.net/u/${usernameRaw}.json`)\n        .then((response) => response.json())\n        .then((json) => {\n          if (json?.user) {\n            setUserJson({\n              user: json.user,\n              shows: json.user.user_fields[1]\n                ? JSON.parse(json.user.user_fields[1]) // TODO This will throw if the field is invalid JSON (which happens...)\n                : [],\n            })\n          }\n        })\n    }\n  }, [usernameRaw])\n\n  const {\n    allSetsCsv: {nodes: allSets},\n    allSongperformancesCsv: {nodes: allSongPerfs},\n    allTeasesCsv: {nodes: allTeases},\n    allShowsCsv: {nodes: allShows},\n    allVenuesCsv: {nodes: allVenues},\n  } = data\n  const findSongPerf = find(__, allSongPerfs)\n  const findSet = find(__, allSets)\n  const findShow = find(__, allShows)\n  const findVenue = find(__, allVenues)\n  const filterTeases = filter(__, allTeases)\n\n  useEffect(() => {\n    if (userJson?.shows) {\n      const shows = userJson.shows.reduce((showsData, showDateString) => {\n        const showDMYYYY = showDateString.split(' ')[0].replace(/\\/(\\d{2})$/, '/20$1')\n        const showData = findShow(propEq('date', showDMYYYY))\n        if (showData?.id) {\n          const venue = findVenue(propEq('id', showData.venue_id))\n          return {\n            ...showsData,\n            [showData.id]: {\n              ...showData,\n              venue,\n            },\n          }\n        }\n        return showsData\n      }, {})\n      setShowsData(shows)\n\n      const perfsData = Object.values(shows)\n        .reduce((setIDs, show) => setIDs.concat([show.set1, show.set2, show.set3, show.encore1, show.encore2].filter((id) => Boolean(id))), [])\n        // now it is an array of set ID strings...\n        .map((setID) => findSet(propEq('id', setID)))\n        .flatMap(({setlist}) => String(setlist).split(':'))\n        // now it is an array of songperf ID strings\n        .map((songPerfID) => findSongPerf(propEq('id', songPerfID)))\n        // now it is an array of songperf objs\n      setPerfsData(perfsData)\n\n      const teasesData = perfsData\n        .flatMap((perf) => filterTeases(propEq('performance_id', perf.id)))\n      setTeasesData(teasesData)\n    }\n  }, [userJson])\n\n  return <Layout className=\"fanstatspage\">\n    <SEO title=\"JRAD Fan Stats\" />\n    <h1><PageTitle username={userJson?.user?.username} /></h1>\n    {usernameRaw\n      ? userJson?.user\n        ? Object.keys(showsData).length\n          ? <FanStats shows={showsData} songs={perfsData} teases={teasesData} user={userJson.user} />\n          : <><p>No shows found! (Have you entered them in <a href=\"https://lot.almost-dead.net/my/preferences/profile\">your account preferences on The Lot</a>?)</p><UsernameForm/></>\n        : userJson?.error\n          ? <><p>Uh oh, error fetching data.</p><UsernameForm/></>\n          : <p>Loading...</p>\n      : <UsernameForm/>\n    }\n  </Layout>\n}\n\nexport const query = graphql`\n  query FanStatsData {\n    allVenuesCsv {\n      nodes {\n        id\n        name\n        location\n        capacity\n        generic_name\n        tagname\n      }\n    }\n    allShowsCsv {\n      nodes {\n        date\n        encore1\n        encore2\n        event\n        id\n        links\n        notes\n        num_recordings\n        set1\n        set2\n        set3\n        soundcheck\n        tagline\n        venue_id\n      }\n    }\n    allSetsCsv {\n      nodes {\n        id\n        setlist\n      }\n    }\n    allSongperformancesCsv {\n      nodes {\n        id\n        set_id\n        song_id\n        song_name\n      }\n    }\n    allTeasesCsv {\n      nodes {\n        id\n        performance_id\n        song_id\n        song_name\n      }\n    }\n  }\n`\n"],"sourceRoot":""}