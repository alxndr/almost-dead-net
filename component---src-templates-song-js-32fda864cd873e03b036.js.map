{"version":3,"sources":["webpack://almost-dead-net/./node_modules/classnames/index.js","webpack://almost-dead-net/./src/components/link-with-previous-url.js","webpack://almost-dead-net/./src/helpers/string_helpers.js","webpack://almost-dead-net/./src/templates/song.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","children","state","rest","Location","location","previousUrl","href","pluralize","number","word","sortSets","a","b","values","whichSet","SET_MAPPING","soundcheck","set1","set2","set3","encore1","encore2","SortableTable","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","id","isSorted","isSortedDesc","render","row","getRowProps","classnames","original","stars","cells","cell","classNameTd","blank","value","getCellProps","url","fullData","showData","prior","song_id","after","to","highlight","endsWith","renderCell","Song","song","songsCsv","allSegues","allSeguesCsv","nodes","allSets","allSetsCsv","allShows","allShowsCsv","allSongPerformances","allSongperformancesCsv","teasesOfThisSong","teasesWithinThisSong","onlyThisSongsPerformanceIds","performances","split","global","console","log","Error","onlyThisSongsPerformancesData","filter","songPerformance","performanceData","performanceIdStr","setData","find","set","setlist","show","setIdsInts","String","perfPositionInSet","indexOf","perfPriorId","songPerf","segue","propEq","type","song_name","entries","col_name","variation","date","title","nicknames","performancesData","useMemo","performancesColumns","accessor","Header","sortType","Date","getTime","disableSortBy","description","author","authorInfo","suite","Boolean","teaseData","performance_id","within"],"mappings":"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","file":"component---src-templates-song-js-32fda864cd873e03b036.js","sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from 'react'\nimport {Location} from '@reach/router'\nimport {Link} from 'gatsby'\n\nconst LinkWithPrevUrl = ({children, state, ...rest}) => (\n  <Location>\n    {({location}) =>\n      <Link {...rest} state={{previousUrl: location.href, ...state}}>\n        {children}\n      </Link>\n    }\n  </Location>\n)\n\nexport default LinkWithPrevUrl\n","/* Appends an \"s\" to the end of `word` if warranted by the value of `number` */\nexport function pluralize(number, word) {\n  return `${number} ${word}${number !== 1 ? 's' : ''}`\n}\n","import React, {useMemo} from 'react'\nimport {useSortBy, useTable} from 'react-table'\nimport {graphql} from 'gatsby'\nimport {find, propEq} from 'ramda'\nimport classnames from 'classnames'\n\nimport {pluralize} from '../helpers/string_helpers'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Link from '../components/link-with-previous-url'\n\nimport './song.css'\n\nfunction authorInfo(author = null) {\n  switch (author) {\n    case null:\n    case '':\n      return false\n    case 'traditional':\n      return <p>(traditional)</p>\n    default:\n      return <p>by {author}</p>\n  }\n}\n\nfunction sortSets(a,b) {\n  if (a.values.whichSet === 'soundcheck')\n    return -1;\n  if (b.values.whichSet === 'soundcheck')\n    return 1;\n  if (a.values.whichSet === 'set 1')\n    return -1;\n  if (b.values.whichSet === 'set 1')\n    return 1;\n  if (a.values.whichSet === 'set 2')\n    return -1;\n  if (b.values.whichSet === 'set 2')\n    return 1;\n  if (a.values.whichSet === 'set 3')\n    return -1;\n  if (b.values.whichSet === 'set 3')\n    return 1;\n  if (a.values.whichSet === 'encore')\n    return -1;\n  if (b.values.whichSet === 'encore')\n    return 1;\n  if (a.values.whichSet === 'double encore')\n    return -1;\n  if (b.values.whichSet === 'double encore')\n    return 1;\n}\n\nconst SET_MAPPING = { // 'show table column name' to 'human readable set name'\n  soundcheck: 'soundcheck',\n  set1: 'set 1',\n  set2: 'set 2',\n  set3: 'set 3',\n  encore1: 'encore',\n  encore2: 'double encore',\n}\n\nexport const query = graphql`\n  query SongTemplate($songId: String!) {\n    songsCsv(id: {eq: $songId}) {\n      id\n      author\n      suite\n      title\n      nicknames\n      performances\n    }\n    allSeguesCsv { nodes {\n      id\n      from_perf_id\n      to_perf_id\n      type\n    }}\n    allSetsCsv { nodes {\n      id\n      setlist\n    } }\n    allShowsCsv { nodes {\n      id\n      date\n      encore1\n      encore2\n      set1\n      set2\n      set3\n      soundcheck\n    } }\n    allSongperformancesCsv { nodes {\n      id\n      song_id\n      song_name\n      stars\n    } }\n    teasesOfThisSong: allTeasesCsv(filter: {song_id: {eq: $songId}}) { nodes {\n      id\n      performance_id\n      within\n    } }\n    teasesWithinThisSong: allTeasesCsv(filter: {performance_id: {eq: $songId}}) { nodes {\n      id\n      song_id\n      song_name\n      # TODO How to link to the show...\n    } }\n  }\n`\n\nfunction renderCell({column, render, row}, previousUrl='') {\n  let url;\n  if (column.id === 'show')\n    url = `/show/${row.original.fullData.showData.id}`\n  else if (column.id === 'prior' && row.original.fullData.prior.song_id)\n    url = `/song/${row.original.fullData.prior.song_id}`\n  else if (column.id ===  'after' && row.original.fullData.after.song_id)\n    url = `/song/${row.original.fullData.after.song_id}`\n  if (url)\n    return <Link to={url} className={classnames({highlight: previousUrl.endsWith(url)})}>{render('Cell')}</Link>;\n  return render('Cell')\n}\n\nfunction SortableTable({columns, data, previousUrl=''}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({columns, data}, useSortBy)\n  return <table {...getTableProps()} className=\"sortable\">\n    <thead>\n      {headerGroups.map(headerGroup =>\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column =>\n            <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                className={`sortable__cell-${column.id} ${column.isSorted ? column.isSortedDesc ? 'sorted-desc' : 'sorted-asc' : ''}`}>\n              {column.render('Header')}\n            </th>\n          )}\n        </tr>\n      )}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row) // no return value; mutates `row`?\n        return <tr {...row.getRowProps()} className={classnames({[`stars-${row.original.stars}`]: row.original.stars})}>\n          {row.cells.map(cell => {\n            const classNameTd = classnames({\n              blank: cell.value === '[opener]' || cell.value === '[closer]',\n              [`sortable__cell-${cell.column.id}`]: true,\n            })\n            return <td {...cell.getCellProps()} className={classNameTd}>{renderCell(cell, previousUrl)}</td>\n          })}\n        </tr>\n      })}\n    </tbody>\n  </table>\n}\n\nexport default function Song({data: {\n  songsCsv: song,\n  allSeguesCsv: {nodes: allSegues},\n  allSetsCsv: {nodes: allSets},\n  allShowsCsv: {nodes: allShows},\n  allSongperformancesCsv: {nodes: allSongPerformances},\n  teasesOfThisSong: {nodes: teasesOfThisSong},\n  teasesWithinThisSong: {nodes: teasesWithinThisSong},\n}, location}) {\n  if (!song) {\n    return <p>Uh oh, no song data found...</p>\n  }\n  const onlyThisSongsPerformanceIds = song.performances.split(':')\n  global.console.log({onlyThisSongsPerformanceIds})\n  if (!allSongPerformances.length) {\n    throw new Error('No data for allSongPerformances')\n  }\n  if (!allShows.length) {\n    throw new Error('No data for allShows')\n  }\n  if (!allSets.length) {\n    throw new Error('No data for allSets')\n  }\n  if (!allSegues.length) {\n    throw new Error('No data for allSegues')\n  }\n  const onlyThisSongsPerformancesData = allSongPerformances\n    .filter((songPerformance) => onlyThisSongsPerformanceIds.includes(songPerformance.id))\n    .map((performanceData) => {\n      const performanceIdStr = performanceData.id.toString()\n      const setData = find((set) =>\n        set.setlist && set.setlist.toString().split(':').includes(performanceIdStr)\n      )(allSets)\n      if (!setData)\n        throw new Error('No setData', {song, performanceData, allSets})\n      const showData = find((show) => [\n        show.soundcheck,\n        show.set1,\n        show.set2,\n        show.set3,\n        show.encore1,\n        show.encore2\n      ].includes(setData.id))(allShows)\n      if (!showData) {\n        throw new Error('No showData', {song, performanceData, setData, allShows})\n      }\n      const setIdsInts = String(setData.setlist).split(':')\n      const perfPositionInSet = setIdsInts.indexOf(performanceIdStr)\n      let prior;\n      if (perfPositionInSet > 0) {\n        const perfPriorId = setIdsInts[perfPositionInSet - 1]\n        prior = allSongPerformances.find(songPerf => songPerf.id === perfPriorId) // TODO refactor to use an object lookup\n        prior.segue = find(propEq('to_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else prior = {song_name: '[opener]'}\n      let after;\n      if (perfPositionInSet < setIdsInts.length - 1) {\n        after = allSongPerformances.find(songPerf => songPerf.id === setIdsInts[perfPositionInSet + 1])\n        after.segue = find(propEq('from_perf_id', performanceIdStr))(allSegues)?.type || ','\n      } else after = {song_name: '[closer]'}\n      const whichSet = Object.entries(SET_MAPPING)\n        .find(([col_name, _readable_name]) => showData[col_name] === setData.id)[1]\n      const variation = performanceData.variation\n        ? `(${performanceData.variation})`\n        : false\n      return {\n        show: showData.date,\n        prior: prior?.song_name,\n        'segue_prior': prior?.segue,\n        title: song.nicknames.split('; ')[0] || song.title,\n        stars: performanceData.stars,\n        'segue_after': after?.segue,\n        after: after?.song_name,\n        whichSet,\n        fullData: {performanceData, showData, variation, whichSet, prior, after}\n      }\n    })\n\n  const performancesData = useMemo(() => onlyThisSongsPerformancesData, [])\n  const performancesColumns = useMemo(\n    () => [\n      {accessor: 'show', Header: 'show', sortType: (a,b) => new Date(a.values.show).getTime() - new Date(b.values.show).getTime()}, // TODO memoize this fn\n      {accessor: 'prior', Header: 'prior song'}, // TODO Filter out the/a\n      {accessor: 'segue_prior', Header: '>'},\n      {accessor: 'title', disableSortBy: true},\n      {accessor: 'segue_after', Header: '>'},\n      {accessor: 'after', Header: 'following song'}, // TODO Filter out the/a\n      {accessor: 'whichSet', Header: 'where', sortType: sortSets},\n    ],\n    []\n  )\n\n  global.console.log('teasesWithinThisSong', teasesWithinThisSong);\n\n  return <Layout className=\"songpage\">\n    <SEO\n      title={`\"${song.title}\" performed or teased by JRAD`}\n      description={`List of each time Joe Russo's Almost Dead has performed or teased the song \"${song.title}\" ${song.author && song.author !== 'traditional' ? `by ${song.author}` : ''}`}\n    />\n\n    <h1 className=\"songpage__name\">{song.title}</h1>\n    <div className=\"songpage__info\">\n      {authorInfo(song.author)}\n      {song.suite && <p>Part of the {song.suite} suite</p>}\n    </div>\n\n    {Boolean(performancesData.length) && // TODO verify that this count is accurate if a song is played twice in one show...\n      <div className=\"songpage__performances\">\n        <h2>Performed at {pluralize(performancesData.length, 'Show')}</h2>\n        <SortableTable\n          data={performancesData}\n          columns={performancesColumns}\n          previousUrl={location?.state?.previousUrl}\n        />\n      </div>\n    }\n\n    {Boolean(teasesOfThisSong.length) &&\n      <div className=\"songpage__teases\">\n        <h2>Teases / Jams</h2>\n        <ul>\n          {teasesOfThisSong.map(teaseData => {\n            const performanceData = find(propEq('id', teaseData.performance_id))(allSongPerformances)\n            if (!(performanceData?.id)) {\n              return false\n            }\n            const setData = find((set) => set.setlist.toString().split(':').includes(performanceData.id.toString()))(allSets)\n            const showData = find((show) => [show.soundcheck, show.set1, show.set2, show.set3, show.encore1, show.encore2].includes(setData.id))(allShows)\n            const url = `/show/${showData.id}`\n            return <li key={teaseData.id} className={classnames({highlight: location?.state?.previousUrl?.endsWith(url)})}>\n              <Link to={url}>{showData.date} within {teaseData.within} {performanceData.variation && `(${performanceData.variation})`}</Link>\n            </li>\n          })}\n        </ul>\n      </div>\n    }\n\n    {Boolean(teasesWithinThisSong.length) &&\n      <div className=\"songpage__contains\">\n        <h2>Teased / Jammed within \"{song.title}\"</h2>\n      </div>\n    }\n  </Layout>\n}\n"],"sourceRoot":""}