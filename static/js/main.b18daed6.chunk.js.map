{"version":3,"sources":["components/setlist.js","release-stages.js","pages/error.js","fetch.js","pages/show.js","routes.js","components/shows_list.js","pages/home.js","App.js","serviceWorker.js","index.js","data.js"],"names":["papaOptions","download","dynamicTyping","header","worker","Setlist","props","console","log","useState","performances","setPerformances","useEffect","Papa","parse","SONG_PERFORMANCES_URL","complete","data","errors","meta","length","Error","global","isEncore","which","setlist","map","perf_id","id","perf","Number","find","propEq","song_name","STAGES","releaseStage","document","location","hostname","defaultPapaParseOptions","getCsv","csvUrl","callback","papaParseOptions","response","Show","params","match","segues","setSegues","shows","setShows","sets","setSets","venues","setVenues","SEGUES_URL","SHOWS_URL","SETS_URL","VENUES_URL","showData","findShow","date","venue_id","venueData","findVenue","name","setlists","reduce","stlsts","setId","setData","concat","split","encores","encrs","className","URL_ROUTING_BASE_WITH_SLASH","anyPath","home","show","ShowEntry","href","routes","replace","ShowsList","undefined","key","Home","App","src","alt","path","exact","component","target","Boolean","window","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","URL_BASE"],"mappings":"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","file":"static/js/main.b18daed6.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport Papa from 'papaparse'\nimport {find, propEq} from 'ramda'\n\nimport {SONG_PERFORMANCES_URL} from '../data'\n\nconst findById = (id) => find(propEq('id', Number(id)))\n\nconst papaOptions = {\n  download: true,\n  dynamicTyping: true,\n  header: true,\n  worker: true,\n}\n\nexport default function Setlist(props) {\n  console.log('setlist seeing...', props) // props.setlist is array of strings\n  const [performances, setPerformances] = useState(null)\n  useEffect(() => {\n    Papa.parse(SONG_PERFORMANCES_URL, { ...papaOptions,\n      complete: ({data, errors, meta}) => {\n        if (errors.length)\n          throw new Error('Ruh roh', {data, errors, meta})\n        setPerformances(data)\n      },\n    })\n  }, [])\n  if (!performances) {\n    return <p>Loading sets...</p>\n  }\n  if (!performances.length) {\n    return <p>Uh oh, no sets found...</p>\n  }\n  global.console.log({performances})\n  // const findPerformance = find(propEq('id', Number(venue_id)))\n  return <>\n    {props.isEncore\n      ? <p>Encore {props.which > 1 && props.which}</p>\n      : <p>Set {props.which}</p>\n    }\n    <ol>\n      {props.setlist.map(perf_id => {\n        const perf = findById(Number(perf_id))(performances)\n        global.console.log({perf})\n        return <li>{perf.song_name}</li>\n      })}\n    </ol>\n  </>\n}\n","export const STAGES = {\n  CANARY: 'canary',\n  DEV: 'dev',\n  PROD: 'prod',\n  UNKNOWN: 'unknown',\n}\n\nexport function releaseStage() {\n  if (!document || !document.location || !document.location.hostname)\n    return STAGES.UNKNOWN\n  switch (document.location.hostname) {\n    case 'almost-dead.net':\n      return STAGES.PROD\n    case 'alxndr.github.io':\n      return STAGES.CANARY\n    case 'localhost':\n      return STAGES.DEV\n    default:\n      return STAGES.UNKNOWN\n  }\n}\n\n","import React from 'react'\n\nexport default function Error() {\n  return <>\n    <h1>Uh oh! Error</h1>\n  </>\n}\n","import Papa from 'papaparse'\n\nconst defaultPapaParseOptions = {\n  download: true,\n  dynamicTyping: true, // TODO remove this... gonna do some conversions ourselves though\n  header: true,\n  worker: true,\n}\n\nexport function getCsv(csvUrl, callback, papaParseOptions = {}) {\n  return Papa.parse(csvUrl, {\n    ...papaParseOptions,\n    ...defaultPapaParseOptions,\n    complete: (response) => {\n      const {data, errors} = response\n      if (errors.length)\n        throw new Error('Error fetching', {csvUrl, response})\n      return callback(data)\n    },\n  })\n}\n","import React, {useEffect, useState} from 'react'\n// import Papa from 'papaparse'\nimport {find, propEq} from 'ramda'\n\nimport {SEGUES_URL, SETS_URL, SHOWS_URL, VENUES_URL} from '../data'\nimport {getCsv} from '../fetch'\n\nimport Setlist from '../components/setlist'\n\nimport './show.css'\n\nexport default function Show({match: {params}}) {\n  const [segues, setSegues] = useState(null)\n  const [shows, setShows] = useState(null)\n  const [sets, setSets] = useState(null)\n  const [venues, setVenues] = useState(null)\n  useEffect(() => {\n    getCsv(SEGUES_URL, setSegues)\n    getCsv(SHOWS_URL, setShows)\n    getCsv(SETS_URL, setSets)\n    getCsv(VENUES_URL, setVenues)\n  }, [])\n  if (!shows) {\n    return <p>Loading shows...</p>\n  }\n  if (!venues) {\n    return <p>Loading venues...</p>\n  }\n  if (!sets) {\n    return <p>Loading sets...</p>\n  }\n  if (!segues) {\n    return <p>Loading segues...</p>\n  }\n  if (!shows.length) {\n    return <p>Uh oh, no shows found...</p>\n  }\n  if (!venues.length) {\n    return <p>Uh oh, no venues found...</p>\n  }\n  if (!sets.length) {\n    return <p>Uh oh, no sets found...</p>\n  }\n  if (!segues.length) {\n    return <p>Uh oh, no segues found...</p>\n  }\n  const findShow = find(propEq('id', Number(params.id)))\n  const showData = findShow(shows)\n  if (!showData) {\n    return <p>Uh oh, no show data found...</p>\n  }\n  const {date, venue_id} = showData\n  const findVenue = find(propEq('id', Number(venue_id)))\n  const venueData = findVenue(venues)\n  if (!venueData) {\n    return <p>Uh oh, no venue data found...</p>\n  }\n  const {name, location} = venueData\n  const setlists = [1, 2, 3].reduce((stlsts, which) => {\n    if (showData[`set${which}`]) {\n      const setId = showData[`set${which}`]\n      const setData = find(propEq('id', Number(setId)))(sets)\n      return stlsts.concat([<Setlist isEncore={false} which={which} id={setData.id} setlist={typeof setData.setlist === \"number\" ? [setData.setlist] : setData.setlist.split(':')} />])\n    }\n    return stlsts\n  }, [])\n  const encores = [1, 2].reduce((encrs, which) => {\n    if (showData[`encore${which}`]) {\n      const setId = showData[`encore${which}`]\n      const setData = find(propEq('id', Number(setId)))(sets)\n      return encrs.concat([<Setlist isEncore={true} which={which} id={setData.id} setlist={typeof setData.setlist === \"number\" ? [setData.setlist] : setData.setlist.split(':')} />])\n    }\n    return encrs\n  }, [])\n  return <>\n    <h1 className=\"pagetitle\">\n      <span className=\"pagetitle--number\">{showData.id}</span>\n      <span className=\"pagetitle--date\">{date}</span>\n      <span className=\"pagetitle--venue\">{name}, {location}</span>\n    </h1>\n    <section>\n    {setlists.length\n      ? setlists\n      : <p>Uh oh, no sets found.</p>\n    }\n    {encores.length\n      ? encores\n      : <p>(no encore)</p>\n    }\n    </section>\n    </>\n}\n","import {STAGES, releaseStage} from './release-stages'\n\nconst URL_ROUTING_BASE_WITH_SLASH = releaseStage() === STAGES.CANARY\n  ? '/almost-dead-net/' // https://alxndr.github.io/almost-dead-net\n  : '/'\n\nexport const anyPath = `${URL_ROUTING_BASE_WITH_SLASH}:path`\nexport const home = `${URL_ROUTING_BASE_WITH_SLASH}`\nexport const show = `${URL_ROUTING_BASE_WITH_SLASH}show/:id`\n\nexport default {\n  anyPath,\n  home,\n  show,\n}\n","import React, {useState, useEffect} from 'react'\n\nimport {getCsv} from '../fetch'\nimport routes from '../routes';\n\nimport {SHOWS_URL} from '../data'\n\nimport './shows_list.css'\n\nfunction ShowEntry({date, id}) {\n  return <li>\n    <a href={routes.show.replace(':id', id)}>{date}</a>\n  </li>\n}\n\nconst UNDEF = undefined\n\nexport default function ShowsList() {\n  const [shows, setShows] = useState(UNDEF)\n  useEffect(() => {\n    getCsv(SHOWS_URL, setShows)\n  }, [])\n  console.log(shows)\n  if (shows === UNDEF) {\n    return <p>Loading...</p>\n  }\n  return <ol className=\"showslist\">\n    {shows.length\n      ? shows.map(show => <ShowEntry key={show.id} date={show.date} id={show.id} />)\n      : <li>Uh oh, no shows found...</li>\n    }\n  </ol>\n}\n","import React from 'react'\n\nimport ShowsList from '../components/shows_list'\n\nexport default function Home(props) {\n  return <>\n    <h1>JRAD Setlists</h1>\n    <ShowsList />\n    <hr />\n    <p>Coming eventually...</p>\n    <ul>\n      <li>links to Archive.org</li>\n      <li>videos</li>\n      <li>tease notations</li>\n    </ul>\n  </>;\n}\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport {releaseStage} from './release-stages'\nimport {Error, Home, Show} from './pages'\nimport routes from './routes'\n\nimport './App.css'\n\nfunction App() {\n  return <>\n    <div className={`App ${releaseStage()}`}>\n      <a id=\"logo\" href={routes.home}><img src=\"https://i.imgur.com/tvtgYVY.png\" alt=\"Good Ol' Almost Dead\" /></a>\n      <BrowserRouter>\n        <Switch>\n          <Route path={routes.home} exact component={Home} />\n          <Route path={routes.show}       component={Show} />\n          <Route path={routes.anyPath}    component={Error} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n    <footer id=\"site-footer\">\n      Contributions / corrections:\n      <br />\n      <a href=\"https://twitter.com/AlmostDeadNet\" target=\"_new\">@AlmostDeadNet on Twitter</a>\n    </footer>\n  </>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const URL_BASE = 'https://gist.githubusercontent.com/alxndr/5f64cf477d5202c004856772ad2222db/raw/012c70a946d7446eccb2e24375813b5bb4aa9ee9'\nconst SEGUES_URL = `${URL_BASE}/segues.csv`\nconst SETS_URL = `${URL_BASE}/sets.csv`\nconst SHOWS_URL = `${URL_BASE}/shows.csv`\nconst SONG_PERFORMANCES_URL = `${URL_BASE}/songperformances.csv`\nconst SONGS_URL = `${URL_BASE}/songs.csv`\nconst VENUES_URL = `${URL_BASE}/venues.csv`\n\nexport {\n  SEGUES_URL,\n  SETS_URL,\n  SHOWS_URL,\n  SONG_PERFORMANCES_URL,\n  SONGS_URL,\n  VENUES_URL,\n}\n"],"sourceRoot":""}