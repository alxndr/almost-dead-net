{"version":3,"sources":["webpack://almost-dead-net/./src/pages/songs.js"],"names":["removeCertainSongs","_ref","title","includes","sortBy","prop","Author","_ref2","name","React","className","SongLink","_ref4","_ref4$data","data","author","core_gd","cover_gd","id","suite","full","performances","Link","to","SortableTable","_ref5","columns","_ref5$link","link","_useTable","useTable","useRowState","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","Object","assign","getHeaderProps","getSortByToggleProps","style","borderBottom","background","fontWeight","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","_cell$column","getCellProps","original","SongsComponent","_ref6","_global","_global$window","_global$window$locati","_ref6$data","songs","allSongsCsv","nodes","teases","allTeasesCsv","groupedByPerformed","groupBy","songData","Boolean","filter","performedData","useMemo","String","split","length","performedColumns","Header","accessor","allSongIdsFromTeases","reduce","a","e","concat","song_id","groupedByTeased","teasedData","propEq","performance_id","teasedColumns","Layout","SEO","description","href","global","window","location","hash","StaticQuery","query"],"mappings":"qMAWMA,EAAqB,SAAHC,GAAA,IAAKC,EAAKD,EAALC,MAAK,OAAMA,IAAU,CAAC,YAAa,QAAS,MAAO,SAASC,SAASD,EAAM,GACpFE,UAAOC,SAAK,UAEhC,SAASC,EAAMC,GAAU,IAARC,EAAID,EAAJC,KACf,SAAKA,GAAiB,gBAATA,IAGNC,gBAAA,QAAMC,UAAU,gBACpBF,EAEL,CAYA,SAASG,EAAQC,GAA6E,IAADC,EAAAD,EAA1EE,KAAOC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAASC,EAAQJ,EAARI,SAAUC,EAAEL,EAAFK,GAAIC,EAAKN,EAALM,MAAOjB,EAAKW,EAALX,MAAsBkB,GAAHP,EAAZQ,aAAmBT,EAAJQ,MACpF,OAAOX,gBAACa,KAAI,CAACC,GAAE,SAAWL,GAAM,IAC5BhB,EAAM,IACPkB,GAAQX,2BAAA,KACN,IACAU,GAASV,gBAAA,QAAMC,UAAU,eAAeS,EAAM,UAC9C,MACEH,GAAWC,IAAaR,gBAACH,EAAM,CAACE,KAAMO,KAG/C,CAEA,SAASS,EAAaC,GAA8B,IAA5BC,EAAOD,EAAPC,QAASZ,EAAIW,EAAJX,KAAIa,EAAAF,EAAEG,YAAI,IAAAD,GAAKA,EAC9CE,GAMIC,cAAS,CAACJ,UAASZ,QAAOiB,cAAaC,aALzCC,EAAaJ,EAAbI,cACAC,EAAiBL,EAAjBK,kBACAC,EAAYN,EAAZM,aACAC,EAAIP,EAAJO,KACAC,EAAUR,EAAVQ,WAEF,OAAO5B,gBAAA,QAAWwB,IAChBxB,gBAAA,aACG0B,EAAaG,KAAI,SAAAC,GAAW,OAC3B9B,gBAAA,KAAQ8B,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7BjC,gBAAA,KAAAkC,OAAAC,OAAA,GAAQF,EAAOG,eAAeH,EAAOI,wBAAuB,CAAEC,MAAO,CAACC,aAAc,iBAAkBC,WAAY,YAAaC,WAAY,UACxIR,EAAOS,OAAO,UACf1C,gBAAA,QAAMC,UAAU,uCACbgC,EAAOU,SAAWV,EAAOW,aAAe,KAAO,KAAO,KAEtD,IAEJ,KAGT5C,gBAAA,QAAWyB,IACRE,EAAKE,KAAI,SAAAgB,GAER,OADAjB,EAAWiB,GACJ7C,gBAAA,KAAQ6C,EAAIC,cAChBD,EAAIE,MAAMlB,KAAI,SAAAmB,GAAI,IAAAC,EAAA,OACjBjD,gBAAA,KAAQgD,EAAKE,eACU,WAAT,QAAXD,EAAAD,EAAKf,cAAM,IAAAgB,OAAA,EAAXA,EAAaxC,KAAkBU,EAC5BnB,gBAACE,EAAQ,CAACG,KAAM2C,EAAKH,IAAIM,WACzBH,EAAKN,OAAO,QACb,IAGX,KAGN,CAEA,SAASU,EAAcC,GAAwE,IAADC,EAAAC,EAAAC,EAAAC,EAAAJ,EAArEhD,KAA4BqD,EAAKD,EAA1BE,YAAcC,MAAqCC,EAAMJ,EAA5BK,aAAeF,MACpEG,GAAqBC,UAAQ,SAACC,GAAQ,OAAKC,QAAQD,EAASrD,aAAa,GAAE8C,EAAMS,OAAO5E,IACxF6E,GAAgBC,cACpB,kBAAMN,GAAmB,GAAMlC,KAAI,SAAAoC,GAAQ,OAAA/B,OAAAC,OAAA,GACtC8B,EAAS,CACZrD,aAAc0D,OAAOL,EAASrD,cAAc2D,MAAM,KAAKC,QAAM,GAC5D,GACH,IAEIC,GAAmBJ,cACvB,iBAAM,CACJ,CAAEK,OAAQ,QAASC,SAAU,SAC7B,CAAED,OAAQ,SAAUC,SAAU,UAC9B,CAAED,OAAQ,QAASC,SAAU,SAC7B,CAAED,OAAQ,QAASC,SAAU,gBAC9B,GACD,IAGIC,EAAuBf,EAAOgB,QAAO,SAACC,EAAEC,GAAC,OAAKD,EAAEE,OAAOD,EAAEE,QAAQ,GAAE,IACnEC,GAAkBlB,UAAQ,SAAAC,GAAQ,OAAIW,EAAqBlF,SAASuE,EAASxD,GAAG,GAAEsD,GAAmB,IACrGoB,GAAad,cACjB,kBAAMa,GAAgB,GAAMrD,KAAI,SAAAoC,GAAQ,OAAA/B,OAAAC,OAAA,GACnC8B,EAAS,CACZJ,QAAQM,UAAOiB,SAAO,UAAWnB,EAASxD,IAAlC0D,CAAuCN,GAAQhC,KAAI,SAACgB,GAAG,OAAKA,EAAIwC,cAAc,IAAEb,QAAM,GAC7F,GACH,IAEIc,GAAgBjB,cACpB,iBAAM,CACJ,CAAEK,OAAQ,QAASC,SAAU,SAC7B,CAAED,OAAQ,SAAUC,SAAU,UAC9B,CAAED,OAAQ,SAAUC,SAAU,UAC/B,GACD,IAGF,OAAO3E,gBAACuF,IAAM,CAACtF,UAAU,SACvBD,gBAACwF,IAAG,CACF/F,MAAM,8BACNgG,YAAY,uGAGdzF,gBAAA,OAAKS,GAAG,aAAaR,UAAU,mBAC7BD,gBAAA,SAAG,qBACHA,gBAAA,UACEA,gBAAA,UAAIA,gBAAA,KAAG0F,KAAK,8BAA6B,6BACzC1F,gBAAA,UAAIA,gBAAA,KAAG0F,KAAK,2BAA0B,mBAI1C1F,gBAAA,MAAI0F,KAAK,8BAA6B,4BACtC1F,gBAAA,SAAG,yGACHA,gBAACe,EAAa,CAACE,QAASwD,EAAkBpE,KAAM+D,IAEhDpE,gBAAA,MAAIS,GAAG,0BAAyB,gBAChCT,gBAAA,SAAG,4GACHA,gBAACe,EAAa,CAACE,QAASqE,EAAejF,KAAM8E,IAE5C,aAAoB,QAAX7B,EAAKqC,WAAM,IAAArC,GAAQ,QAARC,EAAND,EAAQsC,cAAM,IAAArC,GAAU,QAAVC,EAAdD,EAAgBsC,gBAAQ,IAAArC,OAAlB,EAANA,EAA0BsC,OAA+D9F,2BAAA,KACtGA,gBAAA,MAAIS,GAAG,0BAAyB,yCAChCT,gBAAA,SAAG,mMACHA,gBAACe,EAAa,CACZE,SAASoD,cAAQ,iBAAM,CAAC,CAACK,OAAQ,QAASC,SAAU,SAAU,CAACD,OAAQ,SAAUC,SAAU,UAAU,GAAE,IACvGtE,MAAMgE,cAAQ,kBAAMa,GAAgB,EAAM,GAAE,IAC5C/D,MAAM,KAId,CA4BA,UA1BkB,WAAH,OAASnB,gBAAC+F,KAAW,CAClCC,MAAK,aAuBLtD,OAAQ,SAAArC,GAAI,OAAIL,gBAACoD,EAAc,CAAC/C,KAAMA,GAAQ,GAC9C,C","file":"component---src-pages-songs-js-35cd04bc3b557c214d72.js","sourcesContent":["import React, {useMemo} from 'react'\nimport {useRowState, useSortBy, useTable} from 'react-table'\nimport {Tooltip} from 'react-tippy'\nimport {graphql, Link, StaticQuery} from 'gatsby'\nimport {filter, groupBy, prop, propEq, sortBy} from 'ramda'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './songs.css'\n\nconst removeCertainSongs = ({title}) => title && !['[unknown]', 'Drums', 'Jam', 'Space'].includes(title)\nconst sortByTitle = sortBy(prop('title')) // TODO ignore \"A\", \"The\", etc\n\nfunction Author({name}) {\n  if (!name || name === 'traditional') {\n    return false\n  }\n  return <span className=\"song__author\">\n    {name}\n  </span>\n}\nfunction PerformanceCount({perfIds, text = 'performed'}) {\n  if (!perfIds || !perfIds.length) {\n    return false\n  }\n  const message = `${text} ${perfIds.length} time${perfIds.length === 1 ? '' : 's'}`\n  return <Tooltip title={message} trigger=\"mouseenter focus click\">\n    <span className=\"song__perfcount\" aria-label=\"notes\" role=\"img\">×{perfIds.length}\n      <span className=\"hidden\">{message}</span>\n    </span>\n  </Tooltip>\n}\nfunction SongLink({data: {author, core_gd, cover_gd, id, suite, title, performances}, full}) {\n  return <Link to={`/song/${id}`}>\n    \"{title}\"\n    {full && <>\n      {' '}\n      {suite && <span className=\"song__suite\">{suite} suite</span>}\n      {' '}\n      {(!core_gd || cover_gd) && <Author name={author} />}\n    </>}\n  </Link>\n}\n\nfunction SortableTable({columns, data, link=true}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({columns, data}, useRowState, useSortBy)\n  return <table {...getTableProps()}>\n    <thead>\n      {headerGroups.map(headerGroup =>\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column =>\n            <th {...column.getHeaderProps(column.getSortByToggleProps())} style={{borderBottom: 'solid 3px gray', background: 'aliceblue', fontWeight: 'bold'}}>\n              {column.render('Header')}\n              <span className=\"songs__performed-table__column-sort\">\n                {column.isSorted ? column.isSortedDesc ? '⬇︎' : '⬆︎' : '⇅'}\n              </span>\n            </th>\n          )}\n        </tr>\n      )}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row) // no return value; mutates `row`?\n        return <tr {...row.getRowProps()}>\n          {row.cells.map(cell =>\n            <td {...cell.getCellProps()}>\n              {cell.column?.id === 'title' && link\n                ? <SongLink data={cell.row.original} />\n                : cell.render('Cell')}\n            </td>\n          )}\n        </tr>\n      })}\n    </tbody>\n  </table>\n}\n\nfunction SongsComponent({data: {allSongsCsv: {nodes: songs}, allTeasesCsv: {nodes: teases}}}) {\n  const groupedByPerformed = groupBy((songData) => Boolean(songData.performances), songs.filter(removeCertainSongs))\n  const performedData = useMemo(\n    () => groupedByPerformed[true].map(songData => ({\n      ...songData,\n      performances: String(songData.performances).split(':').length,\n    })),\n    []\n  )\n  const performedColumns = useMemo(\n    () => [\n      { Header: \"title\", accessor: \"title\" },\n      { Header: \"author\", accessor: \"author\" },\n      { Header: \"suite\", accessor: \"suite\" },\n      { Header: \"plays\", accessor: \"performances\" },\n    ],\n    []\n  )\n\n  const allSongIdsFromTeases = teases.reduce((a,e) => a.concat(e.song_id), [])\n  const groupedByTeased = groupBy(songData => allSongIdsFromTeases.includes(songData.id), groupedByPerformed[false])\n  const teasedData = useMemo(\n    () => groupedByTeased[true].map(songData => ({\n      ...songData,\n      teases: filter(propEq('song_id', songData.id))(teases).map((row) => row.performance_id).length,\n    })),\n    []\n  )\n  const teasedColumns = useMemo(\n    () => [\n      { Header: \"title\", accessor: \"title\" },\n      { Header: \"author\", accessor: \"author\" },\n      { Header: \"teases\", accessor: \"teases\" },\n    ],\n    []\n  )\n\n  return <Layout className=\"songs\">\n    <SEO\n      title=\"JRAD songs played or teased\"\n      description=\"Repertoire of songs and teases performed by Joe Russo's Almost Dead, plus setlists of each concert\"\n    />\n\n    <div id=\"songs__toc\" className=\"tableofcontents\">\n      <p>Table of Contents</p>\n      <ol>\n        <li><a href=\"#songs__performed-headline\">Songs Performed / Jammed</a></li>\n        <li><a href=\"#songs__teased-headline\">Songs Teased</a></li>\n      </ol>\n    </div>\n\n    <h1 href=\"#songs__performed-headline\">Songs Performed / Jammed</h1>\n    <p>These songs have been performed in their entirety, or played as an extended theme by the entire band.</p>\n    <SortableTable columns={performedColumns} data={performedData} />\n\n    <h1 id=\"songs__teased-headline\">Songs Teased</h1>\n    <p>These are songs which have been hinted at by one or more members of the band while playing another song.</p>\n    <SortableTable columns={teasedColumns} data={teasedData} />\n\n    {'#notyet' === global?.window?.location?.hash /* TODO this can trigger a runtime error in browser */ && <>\n      <h1 id=\"songs__notyet-headline\">Not Yet Played from the GD Repertoire</h1>\n      <p>This is an incomplete list of songs which the Grateful Dead or their members recorded or played live (either together or in other projects), but have been neither played nor teased by JRAD...</p>\n      <SortableTable\n        columns={useMemo(() => [{Header: \"title\", accessor: \"title\"}, {Header: \"author\", accessor: \"author\"}], [])}\n        data={useMemo(() => groupedByTeased[false], [])}\n        link={false}\n      />\n    </>}\n  </Layout>\n}\n\nconst SongsPage = () => <StaticQuery\n  query={graphql`\n    query SongsPageData {\n      allSongsCsv { nodes {\n        author\n        core_gd\n        core_jrad\n        cover_gd\n        id\n        performances\n        suite\n        title\n      } }\n      allTeasesCsv { nodes {\n        id\n        by\n        notes\n        performance_id\n        song_id\n        song_name\n        within\n      } }\n    }\n  `}\n  render={data => <SongsComponent data={data} />}\n/>\nexport default SongsPage\n"],"sourceRoot":""}